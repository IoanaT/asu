{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "markdown",
     "checksum": "97b470e14726ef3628924dde59f4647a",
     "grade": false,
     "grade_id": "cell-1a02bff32a097b76",
     "locked": true,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "source": [
    "# Assignment 3\n",
    "\n",
    "In this assignment we will be build a multi layer neural network and train it to classify hand-written digits into 10 classes (digits 0-9). Assignment 3 will build upon the learning from Assignment 2. We will extend Assignment 2 by introducing optmization techniques like dropout, momentum and learning_rate scheduling and use of minibatch gradient descent"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "code",
     "checksum": "bd5ac0db59406e661d8ef88be3baa17a",
     "grade": false,
     "grade_id": "cell-d9bd60ff8a7a5aba",
     "locked": true,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "outputs": [],
   "source": [
    "#import libraries and functions to load the data\n",
    "from digits import get_mnist\n",
    "from matplotlib import pyplot as plt\n",
    "import numpy as np\n",
    "import ast\n",
    "import sys\n",
    "import numpy.testing as npt\n",
    "import pytest\n",
    "import random\n",
    "from IPython.core.debugger import set_trace"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "markdown",
     "checksum": "2d8b8402ab293c269aef902b1afe21ca",
     "grade": false,
     "grade_id": "cell-7e789c2d07d0df38",
     "locked": true,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "source": [
    "## Load and Visualize Data\n",
    "\n",
    "MNIST dataset contains grayscale samples of handwritten digits of size 28 $\\times$ 28. It is split into training set of 60,000 examples, and a test set of 10,000 examples. We will use the entire dataset for training. Since we plan to use minibatch gradient descent, we can work with a larger dataset and not worry if it will fit into memory. You will also see the improved speed of minibatch gradient descent compared to Assignment 2, where we used batch gradeint descent (using the entire training data as a batch)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "code",
     "checksum": "8ca9098028d932a01a5cc12ac78b384e",
     "grade": false,
     "grade_id": "cell-153e3e96f279c5f5",
     "locked": true,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "trX.shape:  (784, 60000)\n",
      "trY.shape:  (1, 60000)\n",
      "tsX.shape:  (784, 10000)\n",
      "tsY.shape:  (1, 10000)\n",
      "Train max: value = 1.0, Train min: value = -1.0\n",
      "Test max: value = 1.0, Test min: value = -1.0\n",
      "Unique labels in train:  [0 1 2 3 4 5 6 7 8 9]\n",
      "Unique labels in test:  [0 1 2 3 4 5 6 7 8 9]\n",
      "\n",
      "Displaying a few samples\n",
      "labels\n",
      "[[5 0 4 1 9 2 1 3 1 4]\n",
      " [3 5 3 6 1 7 2 8 6 9]\n",
      " [4 0 9 1 1 2 4 3 2 7]\n",
      " [3 8 6 9 0 5 6 0 7 6]\n",
      " [1 8 7 9 3 9 8 5 9 3]\n",
      " [7 2 1 0 4 1 4 9 5 9]\n",
      " [0 6 9 0 1 5 9 7 3 4]\n",
      " [9 6 6 5 4 0 7 4 0 1]\n",
      " [3 1 3 4 7 2 7 1 2 1]\n",
      " [1 7 4 2 3 5 1 2 4 4]]\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x576 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "random.seed(1)\n",
    "np.random.seed(1)\n",
    "trX, trY, tsX, tsY = get_mnist()\n",
    "# We need to reshape the data everytime to match the format (d,m), where d is dimensions (784) and m is number of samples\n",
    "trX = trX.reshape(-1, 28*28).T\n",
    "trY = trY.reshape(1, -1)\n",
    "tsX = tsX.reshape(-1, 28*28).T\n",
    "tsY = tsY.reshape(1, -1)\n",
    "    \n",
    "# Lets examine the data and see if it is normalized\n",
    "print('trX.shape: ', trX.shape)\n",
    "print('trY.shape: ', trY.shape)\n",
    "print('tsX.shape: ', tsX.shape)\n",
    "print('tsY.shape: ', tsY.shape)\n",
    "print('Train max: value = {}, Train min: value = {}'.format(np.max(trX), np.min(trX)))\n",
    "print('Test max: value = {}, Test min: value = {}'.format(np.max(tsX), np.min(tsX)))\n",
    "print('Unique labels in train: ', np.unique(trY))\n",
    "print('Unique labels in test: ', np.unique(tsY))\n",
    "\n",
    "# Let's visualize a few samples and their labels from the train and test datasets.\n",
    "print('\\nDisplaying a few samples')\n",
    "visx = np.concatenate((trX[:,:50],tsX[:,:50]), axis=1).reshape(28,28,10,10).transpose(2,0,3,1).reshape(28*10,-1)\n",
    "visy = np.concatenate((trY[:,:50],tsY[:,:50]), axis=1).reshape(10,-1)\n",
    "    \n",
    "print('labels')\n",
    "print(visy)\n",
    "plt.figure(figsize = (8,8))\n",
    "plt.axis('off')\n",
    "plt.imshow(visx, cmap='gray');"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "markdown",
     "checksum": "37df5ec899c09d162a1714cd03e601a2",
     "grade": false,
     "grade_id": "cell-e77c10bfbde99f2c",
     "locked": true,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "source": [
    "## Reuse Code from Assignment 2\n",
    "\n",
    "There are some sections in this assignment which require you to use the code you implemented for Assignment 2. These sections need to work correctly for Assignment 3 to be successful. However, these sections will not have any points assigned to them. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "markdown",
     "checksum": "7221fc5c8438626f55fed907bdbdeb70",
     "grade": false,
     "grade_id": "cell-36f264bd171e66a2",
     "locked": true,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "source": [
    "### Rectified Linear Unit-ReLU (repeated from Assignment 2:   0 points)\n",
    "\n",
    "ReLU (Rectified Linear Unit) is a piecewise linear function defined as\n",
    "\\begin{equation*}\n",
    "ReLU(Z) = \\text{max}(0,Z)\n",
    "\\end{equation*}\n",
    "\n",
    "Hint: use [numpy.maximum](https://docs.scipy.org/doc/numpy/reference/generated/numpy.maximum.html)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "deletable": false,
    "nbgrader": {
     "cell_type": "code",
     "checksum": "305c954ece9e4a95d802995ee253af50",
     "grade": false,
     "grade_id": "test_case1_relu_soln",
     "locked": false,
     "schema_version": 3,
     "solution": true,
     "task": false
    }
   },
   "outputs": [],
   "source": [
    "def relu(Z):\n",
    "    '''\n",
    "    Computes relu activation of input Z\n",
    "    \n",
    "    Inputs: \n",
    "        Z: numpy.ndarray (n, m) which represent 'm' samples each of 'n' dimension\n",
    "        \n",
    "    Outputs: \n",
    "        A: where A = ReLU(Z) is a numpy.ndarray (n, m) representing 'm' samples each of 'n' dimension\n",
    "        cache: a dictionary with {\"Z\", Z}\n",
    "        \n",
    "    '''\n",
    "    cache = {}\n",
    "    # your code here\n",
    "    A = np.maximum(0,Z)\n",
    "    cache[\"Z\"]=Z\n",
    "    \n",
    "    return A, cache"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "code",
     "checksum": "d68ac986a1737d197092d30d8807deb6",
     "grade": true,
     "grade_id": "test_case1_relu",
     "locked": true,
     "points": 0,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "outputs": [],
   "source": [
    "#Test\n",
    "z_tst = [-2,-1,0,1,2]\n",
    "a_tst, c_tst = relu(z_tst)\n",
    "npt.assert_array_equal(a_tst,[0,0,0,1,2])\n",
    "npt.assert_array_equal(c_tst[\"Z\"], [-2,-1,0,1,2])\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "markdown",
     "checksum": "0f49ae7f620c77d0e403a032c633e256",
     "grade": false,
     "grade_id": "cell-9e69ac398fc920e4",
     "locked": true,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "source": [
    "### ReLU - Gradient (repeated from Assignment 2:   0 points)\n",
    "\n",
    "The gradient of ReLu($Z$) is 1 if $Z>0$ else it is 0."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "deletable": false,
    "nbgrader": {
     "cell_type": "code",
     "checksum": "dc140b793336a33c53c1fe2d27397f57",
     "grade": false,
     "grade_id": "test_case2_relu_der_soln",
     "locked": false,
     "schema_version": 3,
     "solution": true,
     "task": false
    }
   },
   "outputs": [],
   "source": [
    "def relu_der(dA, cache):\n",
    "    '''\n",
    "    Computes derivative of relu activation\n",
    "    \n",
    "    Inputs: \n",
    "        dA: derivative from the subsequent layer of dimension (n, m). \n",
    "            dA is multiplied elementwise with the gradient of ReLU\n",
    "        cache: dictionary with {\"Z\", Z}, where Z was the input \n",
    "            to the activation layer during forward propagation\n",
    "        \n",
    "    Outputs: \n",
    "        dZ: the derivative of dimension (n,m). It is the elementwise \n",
    "            product of the derivative of ReLU and dA\n",
    "        \n",
    "    '''\n",
    "    dZ = np.array(dA, copy=True)\n",
    "    Z = cache[\"Z\"]\n",
    "    # your code here\n",
    "    for i in range(Z.shape[0]):\n",
    "        for j in range(Z.shape[1]):\n",
    "            if Z[i][j] > 0:\n",
    "                dZ[i][j]=dA[i][j]\n",
    "            else:\n",
    "                dZ[i][j]=0\n",
    "    \n",
    "    return dZ"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "code",
     "checksum": "7f852b01b4c73d0b30c98a2ec928f88b",
     "grade": true,
     "grade_id": "test_case2_relu_der",
     "locked": true,
     "points": 0,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "outputs": [],
   "source": [
    "#Test\n",
    "dA_tst = np.array([[0,2],[1,1]])\n",
    "cache_tst = {}\n",
    "cache_tst['Z'] = np.array([[-1,2],[1,-2]])\n",
    "npt.assert_array_equal(relu_der(dA_tst,cache_tst),np.array([[0,2],[1,0]]))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "markdown",
     "checksum": "bd03aee42ab92a4b63da967f3759c88e",
     "grade": false,
     "grade_id": "cell-ff93df0fc4bbc430",
     "locked": true,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "source": [
    "### Linear activation and its derivative (repeated from Assignment 2)\n",
    "\n",
    "There is no activation involved here. It is an identity function. \n",
    "\\begin{equation*}\n",
    "\\text{Linear}(Z) = Z\n",
    "\\end{equation*}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "code",
     "checksum": "695ee8c0246dcc69a45cdcc2b32e07cb",
     "grade": false,
     "grade_id": "cell-5c19d5fd5d97fb3e",
     "locked": true,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "outputs": [],
   "source": [
    "def linear(Z):\n",
    "    '''\n",
    "    Computes linear activation of Z\n",
    "    This function is implemented for completeness\n",
    "        \n",
    "    Inputs: \n",
    "        Z: numpy.ndarray (n, m) which represent 'm' samples each of 'n' dimension\n",
    "        \n",
    "    Outputs: \n",
    "        A: where A = Linear(Z) is a numpy.ndarray (n, m) representing 'm' samples each of 'n' dimension\n",
    "        cache: a dictionary with {\"Z\", Z}   \n",
    "    '''\n",
    "    A = Z\n",
    "    cache = {}\n",
    "    cache[\"Z\"] = Z\n",
    "    return A, cache\n",
    "\n",
    "\n",
    "def linear_der(dA, cache):\n",
    "    '''\n",
    "    Computes derivative of linear activation\n",
    "    This function is implemented for completeness\n",
    "    \n",
    "    Inputs: \n",
    "        dA: derivative from the subsequent layer of dimension (n, m). \n",
    "            dA is multiplied elementwise with the gradient of Linear(.)\n",
    "        cache: dictionary with {\"Z\", Z}, where Z was the input \n",
    "            to the activation layer during forward propagation\n",
    "        \n",
    "    Outputs: \n",
    "        dZ: the derivative of dimension (n,m). It is the elementwise \n",
    "            product of the derivative of Linear(.) and dA\n",
    "    '''      \n",
    "    dZ = np.array(dA, copy=True)\n",
    "    return dZ"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "markdown",
     "checksum": "ce35f78ff70d66940badc942b348ebf3",
     "grade": false,
     "grade_id": "cell-076c0de6c87fa8af",
     "locked": true,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "source": [
    "### Softmax Activation and Cross-entropy Loss Function (repeated from Assignment 2:  0 points)\n",
    "\n",
    "The softmax activation is computed on the outputs from the last layer and the output label with the maximum probablity is predicted as class label. The softmax function can also be refered as normalized exponential function which takes a vector of $n$ real numbers as input, and normalizes it into a probability distribution consisting of $n$ probabilities proportional to the exponentials of the input numbers.\n",
    "\n",
    "The input to the softmax function is the $(n \\times m)$ matrix, $ Z = [ z^{(1)} , z^{(2)}, \\ldots, z^{(m)} ] $, where $z^{(i)}$ is the $i^{th}$ sample of $n$ dimensions. We estimate the softmax for each of the samples $1$ to $m$. The softmax activation for sample $z^{(i)}$ is $a^{(i)} = \\text{softmax}(z^{(i)})$, where the components of $a^{(i)}$ are,\n",
    "\\begin{equation}\n",
    "a_k{(i)} = \\frac{\\text{exp}(z^{(i)}_k)}{\\sum_{k = 1}^{n}\\text{exp}(z^{(i)}_k)} \\qquad \\text{for} \\quad 1\\leq k\\leq n\n",
    "\\end{equation}\n",
    "\n",
    "The output of the softmax is $ A = [ a^{(1)} , a^{(2)} .... a^{(m)} ]$, where $a^{(i)} = [a^{(i)}_1,a^{(i)}_2, \\ldots, a^{(i)}_n]^\\top$.  In order to avoid floating point overflow, we subtract a constant from all the input components of $z^{(i)}$ before calculating the softmax. This constant is $z_{max}$, where, $z_{max} = \\text{max}(z_1,z_2,...z_n)$. The activation is given by,\n",
    "\n",
    "\\begin{equation}\n",
    "a_k{(i)} = \\frac{\\text{exp}(z^{(i)}_k- z_{max})}{\\sum_{k = 1}^{n}\\text{exp}(z^{(i)}_k - z_{max})} \\qquad \\text{for} \\quad 1\\leq k\\leq n\n",
    "\\end{equation}\n",
    "\n",
    "If the output of softmax is given by $A$ and the ground truth is given by $Y = [ y^{(1)} , y^{(2)}, \\ldots, y^{(m)}]$, the cross entropy loss between the predictions $A$ and groundtruth labels $Y$ is given by,\n",
    "\n",
    "\\begin{equation}\n",
    "Loss(A,Y) = - \\frac{1}{m} \\sum_{i=1}^m \\sum_{k=1}^{n}I \\{ y^i = k \\} \\text{log}a_k^i\n",
    "\\end{equation}\n",
    "\n",
    "\n",
    "where $I$ is the identity function given by \n",
    "\n",
    "\\begin{equation}\n",
    "I\\{\\text{condition}\\} = 1, \\quad \\text{if condition = True}\\\\\n",
    "I\\{\\text{condition}\\} = 0, \\quad \\text{if condition = False}\\\\\n",
    "\\end{equation}\n",
    "Hint: use [numpy.exp](https://docs.scipy.org/doc/numpy/reference/generated/numpy.exp.html)\n",
    "numpy.max,\n",
    "[numpy.sum](https://docs.scipy.org/doc/numpy/reference/generated/numpy.sum.html)\n",
    "[numpy.log](https://docs.scipy.org/doc/numpy/reference/generated/numpy.log.html)\n",
    "Also refer to use of 'keepdims' and 'axis' parameter."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "deletable": false,
    "nbgrader": {
     "cell_type": "code",
     "checksum": "96ce0af0b0c8a2cbe0176be9a65aaf55",
     "grade": false,
     "grade_id": "test_case3_softmax_soln",
     "locked": false,
     "schema_version": 3,
     "solution": true,
     "task": false
    }
   },
   "outputs": [],
   "source": [
    "def softmax_cross_entropy_loss(Z, Y=np.array([])):\n",
    "    '''\n",
    "    Computes the softmax activation of the inputs Z\n",
    "    Estimates the cross entropy loss\n",
    "\n",
    "    Inputs: \n",
    "        Z: numpy.ndarray (n, m)\n",
    "        Y: numpy.ndarray (1, m) of labels\n",
    "            when y=[] loss is set to []\n",
    "    \n",
    "    Outputs:\n",
    "        A: numpy.ndarray (n, m) of softmax activations\n",
    "        cache: a dictionary to store the activations which will be used later to estimate derivatives\n",
    "        loss: cost of prediction\n",
    "    '''\n",
    "    \n",
    "    # your code here\n",
    "    A=np.copy(Z)\n",
    "    if (Y.size == 0):\n",
    "        loss = []\n",
    "    else:\n",
    "        loss = 0\n",
    "    m = Z.shape[1]\n",
    "    for col in range(Z.shape[1]):\n",
    "        \n",
    "        sum_exp = np.sum(np.exp(Z[:,col]))\n",
    "        for row in range(Z.shape[0]):\n",
    "            A[row][col]=np.exp(Z[row][col])/sum_exp\n",
    "            if (Y.size!=0 and Y[0][col]==row):\n",
    "                loss = loss + np.log(A[row][col])\n",
    "   \n",
    "    if (Y.size != 0):\n",
    "        loss = -1/m * loss \n",
    "        \n",
    "    cache = {}\n",
    "    cache[\"A\"] = A\n",
    "    return A, cache, loss"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "code",
     "checksum": "ba99e7e708852e0c35b5b6f3665d239d",
     "grade": true,
     "grade_id": "test_case3_softmax",
     "locked": true,
     "points": 0,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "outputs": [],
   "source": [
    "#test cases for softmax_cross_entropy_loss\n",
    "np.random.seed(1)\n",
    "Z_t = np.random.randn(3,4)\n",
    "Y_t = np.array([[1,0,1,2]])\n",
    "A_t = np.array([[0.57495949, 0.38148818, 0.05547572, 0.36516899],\n",
    "       [0.26917503, 0.07040735, 0.53857622, 0.49875847],\n",
    "       [0.15586548, 0.54810447, 0.40594805, 0.13607254]])\n",
    "\n",
    "A_est, cache_est, loss_est = softmax_cross_entropy_loss(Z_t, Y_t)\n",
    "npt.assert_almost_equal(loss_est,1.2223655548779273,decimal=5)\n",
    "npt.assert_array_almost_equal(A_est,A_t,decimal=5)\n",
    "npt.assert_array_almost_equal(cache_est['A'],A_t,decimal=5)\n",
    "\n",
    "# hidden test cases follow"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "markdown",
     "checksum": "cf8515684585cafb58a9d922e3a8720b",
     "grade": false,
     "grade_id": "cell-5151a9f9720ee789",
     "locked": true,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "source": [
    "### Derivative of the softmax_cross_entropy_loss(.) (repeated from Assignment 2   -   0 points)\n",
    "\n",
    "We discused in the lecture that it is easier to directly estimate $dZ$ which is $\\frac{dL}{dZ}$, where $Z$ is the input to the *softmax_cross_entropy_loss($Z$)* function. \n",
    "\n",
    "Let $Z$ be the $(n\\times m)$ dimension input and $Y$ be the $(1,m)$ groundtruth labels. If $A$ is the $(n\\times m)$ matrix of softmax activations of $Z$, the derivative $dZ$ is given by, \n",
    "\n",
    "\\begin{equation}\n",
    "dZ =\\frac{1}{m} (A -\\bar{Y})\n",
    "\\end{equation}\n",
    "\n",
    "where, $\\bar{Y}$ is the one-hot representation of $Y$. \n",
    "\n",
    "One-hot encoding is a binary representation of the discrete class labels. For example, let $y^{(i)}\\in\\{0,1,2\\}$ for a 3-category problem. Assume there are $m=4$ data points. In this case $Z$ will be a $3 \\times 4$ matrix. Let the categories of the 4 data points be $Y=[1,0,1,2]$. The one hot representation is given by, \n",
    "\\begin{equation}\n",
    "\\bar{Y} = \n",
    "    \\begin{bmatrix}\n",
    "    0 ~ 1 ~ 0 ~ 0\\\\\n",
    "    1 ~ 0 ~ 1 ~ 0\\\\\n",
    "    0 ~ 0 ~ 0 ~ 1\n",
    "    \\end{bmatrix}\n",
    "\\end{equation}\n",
    "where, the one-hot encoding for label $y^{(1)} = 1$ is $\\bar{y}^{(1)} = [0, 1, 0]^\\top$. Similarly, the one-hot encoding for $y^{(4)} = 2$ is $\\bar{y}^{(4)} = [0, 0, 1]^\\top$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "deletable": false,
    "nbgrader": {
     "cell_type": "code",
     "checksum": "e131cd252e51deebb53d920f975a4ac5",
     "grade": false,
     "grade_id": "test_case4_softmax_der_soln",
     "locked": false,
     "schema_version": 3,
     "solution": true,
     "task": false
    }
   },
   "outputs": [],
   "source": [
    "def softmax_cross_entropy_loss_der(Y, cache):\n",
    "    '''\n",
    "    Computes the derivative of the softmax activation and cross entropy loss\n",
    "\n",
    "    Inputs: \n",
    "        Y: numpy.ndarray (1, m) of labels\n",
    "        cache: a dictionary with cached activations A of size (n,m)\n",
    "\n",
    "    Outputs:\n",
    "        dZ: derivative dL/dZ - a numpy.ndarray of dimensions (n, m) \n",
    "    '''\n",
    "    A = cache[\"A\"]\n",
    "    # your code here\n",
    "    dZ = np.copy(A)\n",
    "    m = Y.shape[1]\n",
    "    for col in range(A.shape[1]):\n",
    "\n",
    "        for row in range(A.shape[0]):\n",
    "           \n",
    "            if (Y[0][col]==row):\n",
    "                dZ[row][col]= 1/m * (A[row][col] - 1)\n",
    "            else:\n",
    "                dZ[row][col]= 1/m * A[row][col] \n",
    "    \n",
    "    return dZ"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "code",
     "checksum": "ddb4d9c5e4005c7f4a06cac3537c2c61",
     "grade": true,
     "grade_id": "test_case4_softmax_der",
     "locked": true,
     "points": 0,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "outputs": [],
   "source": [
    "#test cases for softmax_cross_entropy_loss_der\n",
    "np.random.seed(1)\n",
    "Z_t = np.random.randn(3,4)\n",
    "Y_t = np.array([[1,0,1,2]])\n",
    "A_t = np.array([[0.57495949, 0.38148818, 0.05547572, 0.36516899],\n",
    "       [0.26917503, 0.07040735, 0.53857622, 0.49875847],\n",
    "       [0.15586548, 0.54810447, 0.40594805, 0.13607254]])\n",
    "cache_t={}\n",
    "cache_t['A'] = A_t\n",
    "dZ_t = np.array([[ 0.14373987, -0.15462795,  0.01386893,  0.09129225],\n",
    "       [-0.18270624,  0.01760184, -0.11535594,  0.12468962],\n",
    "       [ 0.03896637,  0.13702612,  0.10148701, -0.21598186]])\n",
    "\n",
    "dZ_est = softmax_cross_entropy_loss_der(Y_t, cache_t)\n",
    "npt.assert_almost_equal(dZ_est,dZ_t,decimal=5)\n",
    "\n",
    "# hidden test cases follow"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Dropout forward (10 points)\n",
    "\n",
    "The dropout layer is introduced to improve regularization by reducing overfitting. The layer will zero out some of the activations in the input based on the 'drop_prob' value. Dropout is only appiled in 'train' mode and not in 'test' mode. In the 'test' mode the output activations are the same as input activations. \n",
    "We will implement the inverted droput method we discussed in the lecture. We define 'prob_keep' as the percentage of activations remaining after dropout, if drop_out = 0.3, then prob_keep = 0.7, i.e., 70% of the activations are retained after dropout. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "deletable": false,
    "nbgrader": {
     "cell_type": "code",
     "checksum": "6b4627af274670c942f2376fe2bac46f",
     "grade": false,
     "grade_id": "cell-e97aa827e6a861ff",
     "locked": false,
     "schema_version": 3,
     "solution": true,
     "task": false
    }
   },
   "outputs": [],
   "source": [
    "def dropout(A, drop_prob, mode='train'):\n",
    "        '''\n",
    "        Using the 'inverted dropout' technique to implement dropout regularization.\n",
    "        Inputs:\n",
    "            A: Activation input before dropout is applied - shape is (n,m)\n",
    "            drop_prob: dropout parameter. If drop_prob = 0.3, we drop 30% of the neuron activations\n",
    "            mode: Dropout acts differently in training and testing mode. Hence, mode is a parameter which\n",
    "                takes in only 2 values, 'train' or 'test'\n",
    "\n",
    "        Outputs:\n",
    "            A: Output of shape (n,m), with some values masked out and other values scaled to account for missing values\n",
    "            cache: a tuple which stores the drop_prob, mode and mask for use in backward pass.\n",
    "        '''\n",
    "        # When there is no dropout return the same activation\n",
    "        mask = None\n",
    "        if drop_prob == 0:\n",
    "            cache = (drop_prob, mode, mask)\n",
    "            return A, cache\n",
    "        \n",
    "        # The prob_keep is the percentage of activations remaining after dropout\n",
    "        # if drop_out = 0.3, then prob_keep = 0.7, i.e., 70% of the activations are retained\n",
    "        prob_keep = 1-drop_prob\n",
    "        \n",
    "        # Note: instead of a binary mask implement a scaled mask, where mask is scaled by dividing it \n",
    "        # by the prob_keep for example, if we have input activations of size (3,4), then the mask is \n",
    "        # mask = (np.random.rand(3,4)<prob_keep)/prob_keep\n",
    "        # We perform the scaling by prob_keep here so we don't have to do it specifically during backpropagation \n",
    "        # We then update A by multiplying it element wise with the mask\n",
    "        \n",
    "        if mode == 'train':\n",
    "            # your code here\n",
    "            mask = (np.random.rand(A.shape[0], A.shape[1])<prob_keep)/prob_keep\n",
    "            A = mask * A\n",
    "        elif mode != 'test':\n",
    "            raise ValueError(\"Mode value not set correctly, set it to 'train' or 'test'\")\n",
    "        cache = (drop_prob, mode, mask)\n",
    "        return A, cache"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "code",
     "checksum": "8ec618234b01b33f9d45586881a90fc5",
     "grade": true,
     "grade_id": "cell-186e9ebb0627e412",
     "locked": true,
     "points": 10,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "outputs": [],
   "source": [
    "np.random.seed(1)\n",
    "\n",
    "x_t = np.random.rand(3,4)\n",
    "drop_prob_t = 0.3\n",
    "x_est, cache_est = dropout(x_t, drop_prob_t, mode='train')\n",
    "npt.assert_array_almost_equal(x_est,np.array(\n",
    "[[5.95745721e-01, 0.0, 1.63392596e-04, 4.31903675e-01],\n",
    " [2.09651273e-01, 1.31912278e-01, 2.66086016e-01, 4.93658181e-01],\n",
    " [0.0,            0.0,            5.98849306e-01, 9.78885001e-01]]\n",
    "),5)\n",
    "npt.assert_array_almost_equal(cache_est[2], np.array(\n",
    "[[1.42857143, 0.,         1.42857143, 1.42857143],\n",
    " [1.42857143, 1.42857143, 1.42857143, 1.42857143],\n",
    " [0.,         0.,         1.42857143, 1.42857143]]\n",
    "),5)\n",
    "assert cache_est[1]=='train'\n",
    "np.random.seed(1)\n",
    "x_t = np.random.rand(3,4)\n",
    "drop_prob_t = 0.3\n",
    "out_est, cache_est = dropout(x_t, drop_prob_t, mode='test')\n",
    "npt.assert_array_almost_equal(out_est, x_t, 6)\n",
    "assert cache_est[1]=='test'\n",
    "np.random.seed(1)\n",
    "x_t = np.random.rand(3,4)\n",
    "drop_prob_t = 0\n",
    "out_est, cache_est = dropout(x_t, drop_prob_t, mode='train')\n",
    "npt.assert_array_almost_equal(out_est, x_t, 6)\n",
    "assert cache_est[0]==0\n",
    "assert cache_est[1]=='train'\n",
    "assert cache_est[2]==None\n",
    "#hidden tests follow"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Dropout backward (10 points)\n",
    "\n",
    "In the backward pass, we estimate the derivative w.r.t. the dropout layer. We will need the 'drop_prob', 'mask' and 'mode' which is obtained from the cache saved during forward pass. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "deletable": false,
    "nbgrader": {
     "cell_type": "code",
     "checksum": "2672cdb298d304e4a8ddf9a77a195e81",
     "grade": false,
     "grade_id": "cell-34ce98b5a9658fae",
     "locked": false,
     "schema_version": 3,
     "solution": true,
     "task": false
    }
   },
   "outputs": [],
   "source": [
    "def dropout_der(dA_in, cache):\n",
    "        '''\n",
    "        Backward pass for the inverted dropout.\n",
    "        Inputs: \n",
    "            dA_in: derivative from the upper layers of dimension (n,m).\n",
    "            cache: tuple containing (drop_out, mode, mask), where drop_out is the probability of drop_out, \n",
    "                if drop_out=0, then the layer does not have any dropout,\n",
    "                mode is either 'train' or 'test' and \n",
    "                mask is a matirx of size (n,m) where 0's indicate masked values\n",
    "        Outputs:\n",
    "            dA_out = derivative of the dropout layer of dimension (n,m)\n",
    "        '''\n",
    "        \n",
    "        dA_out = None\n",
    "        drop_out, mode, mask = cache\n",
    "        # If there is no dropout return the same derivative from the previous layer\n",
    "        if not drop_out:\n",
    "            return dA_in\n",
    "       \n",
    "        # if mode is 'train' dA_out is dA_in multiplied element wise by mask\n",
    "        # if mode is 'test' dA_out is same as dA_in\n",
    "        # your code here\n",
    "        if mode == 'train':\n",
    "            dA_out = mask * dA_in\n",
    "        elif mode == 'test':\n",
    "             dA_out = dA_in\n",
    "        elif mode != 'test':\n",
    "            raise ValueError(\"Mode value not set correctly, set it to 'train' or 'test'\")       \n",
    "            \n",
    "        return dA_out"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "code",
     "checksum": "4268ef2b0bc6d72e605c81879721fa9a",
     "grade": true,
     "grade_id": "cell-f8ed32ff4bf0bd9a",
     "locked": true,
     "points": 10,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "outputs": [],
   "source": [
    "np.random.seed(1)\n",
    "dA_in_t = np.random.rand(4,2)\n",
    "mask_t = np.array(\n",
    "[[1.42857143, 1.42857143],\n",
    " [1.42857143, 1.42857143],\n",
    " [1.42857143, 0.        ],\n",
    " [1.42857143, 1.42857143]])\n",
    "mode_t = 'test'\n",
    "drop_prob_t = 0.3\n",
    "cache_t = (drop_prob_t,mode_t, mask_t)\n",
    "dA_out_est = dropout_der(dA_in_t, cache_t)\n",
    "npt.assert_array_almost_equal(dA_out_est, np.array(\n",
    "[\n",
    " [4.17022005e-01, 7.20324493e-01],\n",
    " [1.14374817e-04, 3.02332573e-01],\n",
    " [1.46755891e-01, 9.23385948e-02],\n",
    " [1.86260211e-01, 3.45560727e-01]\n",
    "]),6)\n",
    "\n",
    "mode_t = 'train'\n",
    "cache = (drop_prob_t, mode_t, mask_t)\n",
    "dA_out_est = dropout_der(dA_in_t, cache)\n",
    "npt.assert_almost_equal(dA_out_est,np.array(\n",
    "[\n",
    " [5.95745721e-01, 1.02903499e+00],\n",
    " [1.63392596e-04, 4.31903675e-01],\n",
    " [2.09651273e-01, 0.0           ],\n",
    " [2.66086016e-01, 4.93658181e-01]\n",
    "]),6)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "markdown",
     "checksum": "a23870ebbde5eeae58d49b8077aed39e",
     "grade": false,
     "grade_id": "cell-8ccc857eca28aa9d",
     "locked": true,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "source": [
    "### Batchnorm forward (15 points)\n",
    "\n",
    "Batchnorm scales the input activations in a minibatch to have a specific mean and variance allowing the training to use larger learning rates to improve training speeds and provide more stability to the training. During training, the input minibatch is first normalized by making it zero mean and scaled to unit variance, i.e., ($0,I$) normalized. The normalized data is then converted to have a mean ($\\beta$) and variance ($\\gamma$), i.e., ($\\beta,\\gamma I$) normalized. Here, $\\beta$ and $\\gamma$ are the parameters for the batchnorm layer which are updated during training using gradient descent. \n",
    "The original batchnorm paper was implemented by applying batchnorm before nonlinear activation. However, batchnorm has been found to be more effective when applied after activation. We will implement this version in Assignment 3. \n",
    "\n",
    "In the lecture, we also discussed implementation of batchnorm during test mode when a single sample may be input for evaluation. We will not be implementing this aspect of batchnorm for the assignment. This implementation will work as designed only when a minibatch of data is presented to the network during evaluation (test mode) and may not work as expected when a single image is input for evaluation (test mode). \n",
    "\n",
    "The batchnorm implementation is tricky, especially the backpropagation. You may use the following source for reference: [Batchnorm backpropagation Tutorial](https://kratzert.github.io/2016/02/12/understanding-the-gradient-flow-through-the-batch-normalization-layer.html). Note: The tutorial representes data as a $(m,n)$ matrix, whereas we represent data as a $(n,m)$ matrix, where $n$ is feature dimensions and $m$ is number of samples. \n",
    "\n",
    "If you are unable to implement the batchnorm correctly, you can still get the network to work by setting the variable 'bnorm_list = [0,0,...,0,0]. This is a list of binary varibles indicating if batchnorm is used for a layer (0 means no batchorm for the corresponding layer). This variable is used in the 'multi_layer_network(.)' function when initalizing the network. \n",
    "Although the follwing testcases may fail, the network can still work without batchnorm and you can get partial credit. \n",
    "\n",
    "The variables you save into the cache is your choice. The tescase only tests for the normalized output."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "deletable": false,
    "nbgrader": {
     "cell_type": "code",
     "checksum": "9bc0845e4a2333e69c031fe554c4e921",
     "grade": false,
     "grade_id": "batchnorm_forward_soln",
     "locked": false,
     "schema_version": 3,
     "solution": true,
     "task": false
    }
   },
   "outputs": [],
   "source": [
    "def batchnorm(A, beta, gamma):\n",
    "    '''\n",
    "    Batchnorm normalizes the input A to mean beta and standard deviation gamma\n",
    "    \n",
    "    Inputs: \n",
    "        A: Activation input after activation - shape is (n,m), m samples where each sample x is (n,1)\n",
    "        beta: mean vector which will be the center of the data after batchnorm - shape is (n,1)\n",
    "        gamma: standard deviation vector which will be scale of the data after batchnorm - shape (n,1)\n",
    "        \n",
    "    Outputs: \n",
    "        Anorm: Normalized version of input A - shape (n,m)\n",
    "        cache: Dictionary of the elements that are necessary for backpropagation\n",
    "    '''\n",
    "    \n",
    "    # When there is no batch norm for a layer, the beta and gamma will be empty arrays\n",
    "    if beta.size == 0 or gamma.size == 0:\n",
    "        cache = {}\n",
    "        return A, cache\n",
    "    # epsilon value used for scaling during normalization to avoid divide by zero. \n",
    "    # don't change this value - the test case will fail if you change this value\n",
    "    epsilon = 1e-5\n",
    "    # your code here\n",
    "    n = A.shape[0]\n",
    "    m = A.shape[1]\n",
    "    mean = np.mean(A, axis=1, keepdims=True)\n",
    "    variance = np.mean(np.power(A-mean, 2), axis=1, keepdims=True)\n",
    "    A_hat = np.copy(A)\n",
    "    Anorm = np.copy(A) \n",
    "    mean_diff = np.copy(A)\n",
    "    cache = {}\n",
    "    n = A.shape[0]\n",
    "    for row in range(A.shape[0]):\n",
    "        mean_diff[row,:] = A[row,:] - mean[row]\n",
    "        A_hat[row,:]= mean_diff[row,:]/np.sqrt(variance[row] + epsilon)\n",
    "        Anorm[row,:]= gamma[row] * A_hat[row,:] + beta[row]\n",
    "    \n",
    "    cache = (mean, variance, beta, gamma, epsilon, A_hat, Anorm, mean_diff)\n",
    "    return Anorm, cache"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "code",
     "checksum": "7b455a20620ddc1f598a35bf733a004b",
     "grade": true,
     "grade_id": "batchnorm_forward",
     "locked": true,
     "points": 15,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "outputs": [],
   "source": [
    "A_t = np.array([[1., 2.],[3., 4.],[5., 6]])\n",
    "beta_t = np.array([[1.], [2.], [3.]])\n",
    "gamma_t = np.array([[4.], [5.], [6.]])\n",
    "Anorm_est, cache_est = batchnorm(A_t, beta_t, gamma_t)\n",
    "npt.assert_array_almost_equal(Anorm_est,np.array(\n",
    "[\n",
    " [-2.99992,  4.99992],\n",
    " [-2.9999,   6.9999 ],\n",
    " [-2.99988,  8.99988]\n",
    "]),5)\n",
    "\n",
    "# There are hidden tests"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "markdown",
     "checksum": "235204f5e72f927c473528f0a1155a10",
     "grade": false,
     "grade_id": "cell-a8cf50ba49b92a32",
     "locked": true,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "source": [
    "### Batchnorm backward (15 points)\n",
    "\n",
    "The forward propagation for batchnorm is relatively straightfoward to implement. For the backward propagation to worrk, you will need to save a set of variables in the cache during the forward propagation. The variables in your cache are your choice. The testcase only tests for the derivative."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {
    "deletable": false,
    "nbgrader": {
     "cell_type": "code",
     "checksum": "fb73a49523de475c649d69105c08ceac",
     "grade": false,
     "grade_id": "batchnorm_backward_soln",
     "locked": false,
     "schema_version": 3,
     "solution": true,
     "task": false
    }
   },
   "outputs": [],
   "source": [
    "def batchnorm_der(dA_in, cache):\n",
    "    '''\n",
    "    Derivative of the batchnorm\n",
    "    Inputs: \n",
    "        dA_in: derivative from the upper layers of dimension (n,m).\n",
    "        cache: Dictionary of the elements that are necessary for backpropagation\n",
    "    Outputs:\n",
    "        dA_out: derivative of the batchnorm layer of dimension (n,m)\n",
    "        dbeta: derivative of beta - shape (n,1)\n",
    "        dgamma: derivative of gamma - shape (n,1)\n",
    "    '''\n",
    "    # When the cache is empty, it indicates there was no batchnorm for the layer\n",
    "    if not cache:\n",
    "        dbeta = []\n",
    "        dgamma = []\n",
    "        return dA_in, dbeta, dgamma\n",
    "    \n",
    "    # your code here\n",
    "    mean, variance, beta, gamma, epsilon, A_hat, Anorm, mean_diff = cache \n",
    "    \n",
    "    N,M = dA_in.shape\n",
    "    \n",
    "    dgamma = np.sum(dA_in * A_hat, axis=1)\n",
    "    dgamma.resize(dgamma.size, 1)\n",
    "    \n",
    "    dbeta = np.sum(dA_in, axis=1)\n",
    "    dbeta.resize(dbeta.size, 1)\n",
    "    \n",
    "    sqrt_var = np.sqrt(variance + epsilon)\n",
    "    sqrt_var.resize(sqrt_var.size, 1)\n",
    "    \n",
    "    inv_var = 1. /sqrt_var\n",
    "    inv_var.resize(inv_var.size, 1)\n",
    "    \n",
    "    dx_hat = dA_in * gamma\n",
    "    \n",
    "    dA_out = np.copy(dA_in)\n",
    "\n",
    "    sum1 = np.sum(dx_hat, axis=1) \n",
    "    sum1.resize(sum1.size, 1)\n",
    "    \n",
    "    sum2 = np.sum(dx_hat*A_hat, axis=1)\n",
    "    sum2.resize(sum2.size, 1)\n",
    "    \n",
    "    dA_out = (1. / M) * inv_var * (M*dx_hat - sum1 - A_hat * sum2)\n",
    "\n",
    "    return dA_out, dbeta, dgamma"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "code",
     "checksum": "0af813c4cdf435717076d9fc55d03e5e",
     "grade": true,
     "grade_id": "batchnorm_backward",
     "locked": true,
     "points": 15,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "outputs": [],
   "source": [
    "A_t = np.array([[1., 2.],[3., 4.],[5., 6]])\n",
    "beta_t = np.array([[1.], [2.], [3.]])\n",
    "gamma_t = np.array([[4.], [5.], [6.]])\n",
    "Anorm_t, cache_t = batchnorm(A_t, beta_t, gamma_t)\n",
    "dA_in_t = np.array(\n",
    "[\n",
    "  [4.,  5.],\n",
    "  [8.,  10.],\n",
    "  [12., 15.]\n",
    "])\n",
    "dA_out_est, dbeta_est, dgamma_est = batchnorm_der(dA_in_t, cache_t)\n",
    "npt.assert_array_almost_equal(dA_out_est,np.array(\n",
    "[\n",
    " [ -0.0001600,    0.0001600],\n",
    " [ -0.0004000,    0.0004000],\n",
    " [ -0.0007200,    0.0007200]\n",
    "]),5)\n",
    "npt.assert_array_almost_equal(dbeta_est,np.array([[9.],[18.],[27.]]),5)\n",
    "npt.assert_array_almost_equal(dgamma_est,np.array([[1.],[2.],[3.]]),4)\n",
    "\n",
    "# There are hidden tests"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "markdown",
     "checksum": "2afffb84ecba8a8f56c26aece3a4998c",
     "grade": false,
     "grade_id": "cell-2d445d2fe1bb530d",
     "locked": true,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "source": [
    "### Parameter Initialization (5 points)\n",
    "\n",
    "We will define the function to initialize the parameters of the multi-layer neural network.\n",
    "The network parameters will be stored as dictionary elements that can easily be passed as function parameters while calculating gradients during back propogation.\n",
    "\n",
    "The parameters are initialized using Kaiming He Initialization (discussed in the lecture). For example, a layer with weights of dimensions $(n_{out}, n_{in})$, the parameters are initialized as\n",
    "$w = np.random.randn(n_{out},n_{in})*(2./np.sqrt(n_{in}))$ and \n",
    "$b = np.zeros((n_{out},1))$\n",
    "\n",
    "The dimension for weight matrix for layer $(l+1)$ is given by ( Number-of-neurons-in-layer-$(l+1)$   $\\times$   Number-of-neurons-in-layer-$l$ ). The dimension of the bias for for layer $(l+1)$ is (Number-of-neurons-in-layer-$(l+1)$   $\\times$   1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {
    "deletable": false,
    "nbgrader": {
     "cell_type": "code",
     "checksum": "5776d8f512e36381fef5991f897725c0",
     "grade": false,
     "grade_id": "params_initialize_soln",
     "locked": false,
     "schema_version": 3,
     "solution": true,
     "task": false
    }
   },
   "outputs": [],
   "source": [
    "def initialize_network(net_dims, act_list, drop_prob_list):\n",
    "    '''\n",
    "    Initializes the parameters W's and b's of a multi-layer neural network\n",
    "    Adds information about dropout and activations in each layer\n",
    "    \n",
    "    Inputs:\n",
    "        net_dims: List containing the dimensions of the network. The values of the array represent the number of nodes in \n",
    "        each layer. For Example, if a Neural network contains 784 nodes in the input layer, 800 in the first hidden layer, \n",
    "        500 in the secound hidden layer and 10 in the output layer, then net_dims = [784,800,500,10]. \n",
    "        act_list: list of strings indicating the activation for a layer\n",
    "        drop_prob_list: list of dropout probabilities for each layer \n",
    "    \n",
    "    Outputs:\n",
    "        parameters: dictionary of \n",
    "                    {\"numLayers\":..}\n",
    "                    activations, {\"act1\":\"..\", \"act2\":\"..\", ...}\n",
    "                    dropouts, {\"dropout1\": .. , \"dropout2\": .., ...}\n",
    "                    network parameters, {\"W1\":[..],\"b1\":[..],\"W2\":[..],\"b2\":[..],...}\n",
    "            The weights are initialized using Kaiming He et al. Initialization\n",
    "    '''\n",
    "    net_dims_len = len(net_dims)\n",
    "    parameters = {}\n",
    "    parameters['numLayers'] = net_dims_len - 1;\n",
    "    for l in range(net_dims_len-1):\n",
    "        parameters[\"act\"+str(l+1)] = act_list[l]\n",
    "        parameters[\"dropout\"+str(l+1)] = drop_prob_list[l]\n",
    "        # Note: Use He et al. Initialization to initialize W and set bias to 0's\n",
    "        # parameters[\"W\"+str(l+1)] = \n",
    "        # parameters[\"b\"+str(l+1)] =\n",
    "        # your code here\n",
    "        \n",
    "        parameters[\"W\"+str(l+1)] = np.random.randn(net_dims[l+1], net_dims[l]) * 2./np.sqrt(net_dims[l])\n",
    "        parameters[\"b\"+str(l+1)] = np.zeros((net_dims[l+1], 1))\n",
    "        \n",
    "    return parameters"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "code",
     "checksum": "94e0b6b2c740ec0a066d1d5b06937bfd",
     "grade": true,
     "grade_id": "params_initialize",
     "locked": true,
     "points": 5,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "outputs": [],
   "source": [
    "#Test \n",
    "np.random.seed(1)\n",
    "net_dims_t = [3,4,1]\n",
    "act_list_t = ['relu', 'linear']\n",
    "drop_prob_list = [0.3,0.5]\n",
    "parameters_est = initialize_network(net_dims_t, act_list_t, drop_prob_list)\n",
    "npt.assert_array_almost_equal(parameters_est['W1'], [\n",
    " [ 1.87563247, -0.70639546, -0.60988021],\n",
    " [-1.23895745,  0.99928666, -2.65758797],\n",
    " [ 2.01473508, -0.87896602,  0.36839462],\n",
    " [-0.28794811,  1.68829682, -2.37884559]\n",
    "],6)\n",
    "assert parameters_est['W1'].shape == (4,3)\n",
    "assert parameters_est['W2'].shape == (1,4)\n",
    "assert parameters_est['b1'].shape == (4,1)\n",
    "assert parameters_est['b2'].shape == (1,1)\n",
    "assert parameters_est['b1'].all() == 0\n",
    "assert parameters_est['b2'].all() == 0\n",
    "assert parameters_est['act1'] == 'relu'\n",
    "assert parameters_est['act2'] == 'linear'\n",
    "assert parameters_est['dropout1'] == 0.3\n",
    "assert parameters_est['dropout2'] == 0.5\n",
    "# There are hidden tests"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "markdown",
     "checksum": "e02e8f835aa4d3015ff23b01f6fc4a1e",
     "grade": false,
     "grade_id": "cell-ffe90db2e8c100f5",
     "locked": true,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "source": [
    "### Adam (momentum) Parameters - Velocity and Gradient-Squares Initialization (5 points)\n",
    "\n",
    "We will optmize using Adam (momentum). This requires velocity parameters $V$ and Gradient-Squares parameters $G$. Here is a quick recap of Adam optmization, \n",
    "\n",
    "\\begin{equation} \n",
    "V_{t+1} = \\beta V_{t} +(1-\\beta)\\nabla J(\\theta_t)\\\\ \n",
    "G_{t+1} = \\beta_2 G_{t} +(1-\\beta_2)\\nabla J(\\theta_t)^2\\\\ \n",
    "\\theta_{t+1} =\\theta_{t} -\\frac{\\alpha}{\\sqrt{G_{t+1}+\\epsilon}}V_{t+1}, \\quad \\theta \\in \\{ W,b \\} \n",
    "\\end{equation}\n",
    "\n",
    "Parameters $V$ are the momentum velocity parameters and parameters $G$ are the Gradient-Squares. \n",
    "$\\nabla J(\\theta)$ is the gradient term $dW$ or $db$, and $\\nabla  J(\\theta)^2$ is the element wise square of the gradient. \n",
    "$\\alpha$ is the step_size for gradient descent. It is has been estimated by decaying the 'learning_rate' based on 'decay_rat'e and 'epoch' number. $\\beta$, $\\beta_2$ and $\\epsilon$ are constants which we will set up later.\n",
    "\n",
    "Each of the parameters $W$'s and $b$'s for all the layers will have their corresponding velocity ($V$) and Gradient-Squares ($G$) parameters. The following function will initialize $V$ and $G$ to zeros with the same size as the corresponding parameters. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {
    "deletable": false,
    "nbgrader": {
     "cell_type": "code",
     "checksum": "e57ee4eb4685673bb0629cc87fcf2475",
     "grade": false,
     "grade_id": "cell-dd58518f843ee3ec",
     "locked": false,
     "schema_version": 3,
     "solution": true,
     "task": false
    }
   },
   "outputs": [],
   "source": [
    "def initialize_velocity(parameters, apply_momentum=True):\n",
    "    '''\n",
    "    The function will add Adam momentum parameters, Velocity and Gradient-Squares \n",
    "    to the parameters for each of the W's and b's \n",
    "    \n",
    "    Inputs: \n",
    "        parameters: dictionary containing, \n",
    "                    {\"numLayers\":..}\n",
    "                    activations, {\"act1\":\"..\", \"act2\":\"..\", ...}\n",
    "                    dropouts, {\"dropout1\": .. , \"dropout2\": .., ...}\n",
    "                    network parameters, {\"W1\":[..],\"b1\":[..],\"W2\":[..],\"b2\":[..],...}\n",
    "                    Note: It is just one dictionary (parameters) with all these key value pairs, not multiple dictionaries\n",
    "        apply_momentum: boolean on whether to apply momentum\n",
    "        \n",
    "    Outputs:\n",
    "        parameters: dictionary that has been updated to include velocity and Gradient-Squares. It now contains,\n",
    "                    {\"numLayers\":..}\n",
    "                    activations, {\"act1\":\"..\", \"act2\":\"..\", ...}\n",
    "                    dropouts, {\"dropout1\": .. , \"dropout2\": .., ...}\n",
    "                    {\"apply_momentum\":..}\n",
    "                    velocity parameters, {\"VdW1\":[..],\"Vdb1\":[..],\"VdW2\":[..],\"Vdb2\":[..],...}\n",
    "                    Gradient-Squares parameters, {\"GdW1\":[..],\"Gdb1\":[..],\"GdW2\":[..],\"Gdb2\":[..],...}\n",
    "                    Note: It is just one dictionary (parameters) with all these key value pairs, not multiple dictionaries\n",
    "    '''\n",
    "    \n",
    "    L = parameters['numLayers'] \n",
    "    parameters['apply_momentum'] = apply_momentum\n",
    "    \n",
    "    # Initialize Velocity and the Gradient-Squares to zeros the same size as the corresponding parameters W's abd b's\n",
    "    for l in range(L):\n",
    "        if apply_momentum:\n",
    "            # Hint: Velocity parameters are represented as VdW and Vdb\n",
    "            #      Gradient-Squares are represented as GdW and Gdb\n",
    "            # You can use np.zeros_like(.) to initilaize them 0's the same size as corresponding parameters W and b\n",
    "            # parameters[\"VdW\" + str(l+1)] = \n",
    "            # parameters[\"Vdb\" + str(l+1)] =\n",
    "            # parameters[\"GdW\" + str(l+1)] =\n",
    "            # parameters[\"Gdb\" + str(l+1)] =\n",
    "            # your code here\n",
    "            parameters[\"VdW\" + str(l+1)] = np.zeros_like(parameters[\"W\" + str(l+1)])\n",
    "            parameters[\"Vdb\" + str(l+1)] = np.zeros_like(parameters[\"b\" + str(l+1)])\n",
    "            parameters[\"GdW\" + str(l+1)] = np.zeros_like(parameters[\"W\" + str(l+1)])\n",
    "            parameters[\"Gdb\" + str(l+1)] = np.zeros_like(parameters[\"b\" + str(l+1)])\n",
    "            \n",
    "    return parameters"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "code",
     "checksum": "10c8698ec51d04aec1f7901ea186c98f",
     "grade": true,
     "grade_id": "cell-5346e9cc7d26c1e3",
     "locked": true,
     "points": 5,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "outputs": [],
   "source": [
    "#Test \n",
    "net_dims_t = [5,4,1]\n",
    "act_list_t = ['relu', 'linear']\n",
    "drop_prob_list = [0.3,0.5]\n",
    "parameters_t = initialize_network(net_dims_t, act_list_t, drop_prob_list)\n",
    "parameters_t = initialize_velocity(parameters_t)\n",
    "assert parameters_t['VdW1'].shape == (4,5)\n",
    "assert parameters_t['VdW1'].all() == 0\n",
    "assert parameters_t['VdW2'].shape == (1,4)\n",
    "assert parameters_t['VdW2'].all() == 0\n",
    "assert parameters_t['Vdb1'].shape == (4,1)\n",
    "assert parameters_t['Vdb2'].shape == (1,1) \n",
    "assert parameters_t['Vdb1'].all() == 0\n",
    "assert parameters_t['Vdb2'].all() == 0\n",
    "assert parameters_t['GdW1'].shape == (4,5)\n",
    "assert parameters_t['GdW1'].all() == 0\n",
    "assert parameters_t['GdW2'].shape == (1,4)\n",
    "assert parameters_t['GdW2'].all() == 0\n",
    "assert parameters_t['Gdb1'].shape == (4,1)\n",
    "assert parameters_t['Gdb2'].shape == (1,1)\n",
    "assert parameters_t['Gdb1'].all() == 0\n",
    "assert parameters_t['Gdb2'].all() == 0\n",
    "assert parameters_t['apply_momentum'] == True\n",
    "# There are hidden tests"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "markdown",
     "checksum": "372ead70fa94bbbb5eefe274e3222488",
     "grade": false,
     "grade_id": "cell-e8ad576b87cea2fb",
     "locked": true,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "source": [
    "### Batchnorm Parameters and corresponding Velocity and Gradient-Squares Initialization "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "code",
     "checksum": "a6f2e5619b0754c69df03c22395830cd",
     "grade": false,
     "grade_id": "cell-74f99853a41130d6",
     "locked": true,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "outputs": [],
   "source": [
    "def initialize_bnorm_params(parameters, bnorm_list, apply_momentum):\n",
    "    '''\n",
    "    The function will add batchnorm parameters beta's and gamma's and their corresponding\n",
    "    Velocity and Gradient-Squares to the parameters dictionary\n",
    "    \n",
    "    Inputs: \n",
    "        parameters: dictionary that contains,\n",
    "                    {\"numLayers\":..}\n",
    "                    activations, {\"act1\":\"..\", \"act2\":\"..\", ...}\n",
    "                    dropouts, {\"dropout1\": .. , \"dropout2\": .., ...}\n",
    "                    {\"apply_momentum\":..}\n",
    "                    velocity parameters, {\"VdW1\":[..],\"Vdb1\":[..],\"VdW2\":[..],\"Vdb2\":[..],...}\n",
    "                    Gradient-Squares parameters, {\"GdW1\":[..],\"Gdb1\":[..],\"GdW2\":[..],\"Gdb2\":[..],...}\n",
    "                    Note: It is just one dictionary (parameters) with all these key value pairs, not multiple dictionaries\n",
    "        bnorm_list: binary list indicating if batchnorm should be implemented for a layer\n",
    "        apply_momentum: boolean on whether to apply momentum\n",
    "        \n",
    "    Outputs:\n",
    "        parameters: dictionary that has been updated to include batchnorm parameters, beta, gamma \n",
    "                    and their corresponding momentum parameters. It now contains,\n",
    "                    {\"numLayers\":..}\n",
    "                    activations, {\"act1\":\"..\", \"act2\":\"..\", ...}\n",
    "                    dropouts, {\"dropout1\": .. , \"dropout2\": .., ...}\n",
    "                    velocity parameters, {\"VdW1\":[..],\"Vdb1\":[..],\"VdW2\":[..],\"Vdb2\":[..],...}\n",
    "                    Gradient-Squares parameters, {\"GdW1\":[..],\"Gdb1\":[..],\"GdW2\":[..],\"Gdb2\":[..],...}\n",
    "                    {\"bnorm_list\":..}\n",
    "                    batchnorm parameters, {\"bnorm_beta1\":[..],\"bnorm_gamma1\":[..],\"bnorm_beta2\":[..],\"bnorm_gamma2\":[..],...}\n",
    "                    batchnorm velocity parameters, {\"Vbnorm_beta1\":[..],\"Vbnorm_gamma1\":[..],\"Vbnorm_beta2\":[..],\"Vbnorm_gamma2\":[..],...}\n",
    "                    batchnorm Gradient-Square parameters, {\"Gbnorm_beta1\":[..],\"Gbnorm_gamma1\":[..],\"Gbnorm_beta2\":[..],\"Gbnorm_gamma2\":[..],...}\n",
    "                    Note: It is just one dictionary (parameters) with all these key value pairs, not multiple dictionaries\n",
    "    '''\n",
    "    \n",
    "    L = parameters['numLayers']\n",
    "    parameters['bnorm_list'] = bnorm_list\n",
    "    \n",
    "    # Initialize batchnorm parameters for the hidden layers only. \n",
    "    # Each hidden layer will have a dictionary of parameters, beta and gamma based on the dimensions of the hidden layer. \n",
    "    for l in range(L):\n",
    "        if bnorm_list[l]:\n",
    "            n = parameters[\"W\" + str(l+1)].shape[0]\n",
    "            parameters['bnorm_beta'+str(l+1)] = np.random.randn(n,1)\n",
    "            parameters['bnorm_gamma'+str(l+1)] = np.random.randn(n,1)\n",
    "            if apply_momentum:\n",
    "                parameters['Vbnorm_beta'+str(l+1)] = np.zeros((n,1))\n",
    "                parameters['Gbnorm_beta'+str(l+1)] = np.zeros((n,1))\n",
    "                parameters['Vbnorm_gamma'+str(l+1)] = np.zeros((n,1))\n",
    "                parameters['Gbnorm_gamma'+str(l+1)] = np.zeros((n,1))\n",
    "        else:\n",
    "            parameters['bnorm_beta'+str(l+1)] = np.asarray([])\n",
    "            parameters['Vbnorm_beta'+str(l+1)] = np.asarray([])\n",
    "            parameters['Gbnorm_beta'+str(l+1)] = np.asarray([])\n",
    "            parameters['bnorm_gamma'+str(l+1)] = np.asarray([])\n",
    "            parameters['Vbnorm_gamma'+str(l+1)] = np.asarray([])\n",
    "            parameters['Gbnorm_gamma'+str(l+1)] = np.asarray([])\n",
    "    return parameters"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "markdown",
     "checksum": "ba2dbfdf3f3b183229914f723e1417d7",
     "grade": false,
     "grade_id": "cell-36236b2868ecda30",
     "locked": true,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "source": [
    "### Forward Propagation Through a Single Layer (repeated from Assignment 2 - 0 points)\n",
    "\n",
    "If the vectorized input to any layer of neural network is $A\\_prev$ and the parameters of the layer are given by $(W,b)$, the output of the layer (before the activation is):\n",
    "\\begin{equation}\n",
    "Z = W.A\\_prev + b\n",
    "\\end{equation}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {
    "deletable": false,
    "nbgrader": {
     "cell_type": "code",
     "checksum": "ed4865aef2f388d832326ef6c4160c95",
     "grade": false,
     "grade_id": "forward_single_layer_soln",
     "locked": false,
     "schema_version": 3,
     "solution": true,
     "task": false
    }
   },
   "outputs": [],
   "source": [
    "def linear_forward(A_prev, W, b):\n",
    "    '''\n",
    "    Input A_prev propagates through the layer \n",
    "    Z = WA + b is the output of this layer. \n",
    "\n",
    "    Inputs: \n",
    "        A_prev: numpy.ndarray (n,m) the input to the layer\n",
    "        W: numpy.ndarray (n_out, n) the weights of the layer\n",
    "        b: numpy.ndarray (n_out, 1) the bias of the layer\n",
    "\n",
    "    Outputs:\n",
    "        Z: where Z = W.A_prev + b, where Z is the numpy.ndarray (n_out, m) dimensions\n",
    "        cache: a dictionary containing the inputs A\n",
    "    '''\n",
    "    # your code here\n",
    "    Z = np.dot(W, A_prev) + b\n",
    "\n",
    "    cache = {}\n",
    "    cache[\"A\"] = A_prev\n",
    "    return Z, cache"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "code",
     "checksum": "ff99bfd982a9c8c02c5df742e8a1c251",
     "grade": true,
     "grade_id": "forward_single_layer",
     "locked": true,
     "points": 0,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "outputs": [],
   "source": [
    "#Hidden test cases follow\n",
    "np.random.seed(1)\n",
    "n1 = 3\n",
    "m1 = 4\n",
    "A_prev_t = np.random.randn(n1,m1)\n",
    "W_t = np.random.randn(n1, n1)\n",
    "b_t = np.random.randn(n1, 1)\n",
    "Z_est, cache_est = linear_forward(A_prev_t, W_t, b_t)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "markdown",
     "checksum": "a78556ac91473852bcf96924e78854ad",
     "grade": false,
     "grade_id": "cell-3c463f4362ff9844",
     "locked": true,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "source": [
    "### Forward Propagation Through a Layer (linear $\\rightarrow$ activation $\\rightarrow$ batchnorm $\\rightarrow$ dropout)\n",
    "\n",
    "The input to the layer propagates through the layer in the order linear $\\rightarrow$ activation $\\rightarrow$ batchnorm $\\rightarrow$ dropout saving different cache along the way."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "code",
     "checksum": "07631dfdb8eefbc842508a3536dffaaa",
     "grade": false,
     "grade_id": "cell-f70a31ac49d9bb4c",
     "locked": true,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "outputs": [],
   "source": [
    "def layer_forward(A_prev, W, b, activation, drop_prob, bnorm_beta, bnorm_gamma, mode):\n",
    "    '''\n",
    "    Input A_prev propagates through the layer followed by activation, batchnorm and dropout\n",
    "\n",
    "    Inputs: \n",
    "        A_prev: numpy.ndarray (n,m) the input to the layer\n",
    "        W: numpy.ndarray (n_out, n) the weights of the layer\n",
    "        b: numpy.ndarray (n_out, 1) the bias of the layer\n",
    "        activation: is the string that specifies the activation function\n",
    "        drop_prob: dropout parameter. If drop_prob = 0.3, we drop 30% of the neuron activations\n",
    "        bnorm_beta: batchnorm beta \n",
    "        bnorm_gamma: batchnorm gamma\n",
    "        mode: 'train' or 'test' Dropout acts differently in training and testing mode. Hence, mode is a parameter which\n",
    "                takes in only 2 values, 'train' or 'test'\n",
    "\n",
    "    Outputs:\n",
    "        A: = g(Z), where Z = WA + b, where Z is the numpy.ndarray (n_out, m) dimensions\n",
    "        g is the activation function\n",
    "        cache: a dictionary containing the cache from the linear propagation, activation, bacthnorm and dropout\n",
    "        to be used for derivative\n",
    "    '''\n",
    "    \n",
    "    Z, lin_cache = linear_forward(A_prev, W, b)\n",
    "    if activation == \"relu\":\n",
    "        A, act_cache = relu(Z)\n",
    "    elif activation == \"linear\":\n",
    "        A, act_cache = linear(Z)\n",
    "    \n",
    "    A, bnorm_cache = batchnorm(A, bnorm_beta, bnorm_gamma)\n",
    "    A, drop_cache = dropout(A, drop_prob, mode)\n",
    "    cache = {}\n",
    "    cache[\"lin_cache\"] = lin_cache\n",
    "    cache[\"act_cache\"] = act_cache\n",
    "    cache[\"bnorm_cache\"] = bnorm_cache\n",
    "    cache[\"drop_cache\"] = drop_cache\n",
    "    \n",
    "    return A, cache"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "markdown",
     "checksum": "611df0adfac42ead393f088d11e8826e",
     "grade": false,
     "grade_id": "cell-243ec2c02ff1834c",
     "locked": true,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "source": [
    "### Multi-Layers Forward Propagation\n",
    "\n",
    "Starting with the input 'A0' and the first layer of the network, we will propgate A0 through every layer using the output of the previous layer as input to the next layer. we will gather the caches from every layer in a list and use it later for backpropagation. We will use the 'layer_forward(.)' function to get the output and caches for a layer. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "code",
     "checksum": "dd87521073a2f0a0c07338d938566eb7",
     "grade": false,
     "grade_id": "cell-40ada61852849730",
     "locked": true,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "outputs": [],
   "source": [
    "def multi_layer_forward(A0, parameters, mode):\n",
    "    '''\n",
    "    Forward propgation through the layers of the network\n",
    "\n",
    "    Inputs: \n",
    "        A0: numpy.ndarray (n,m) with n features and m samples\n",
    "        parameters: dictionary of network parameters {\"W1\":[..],\"b1\":[..],\"W2\":[..],\"b2\":[..]...}\n",
    "        mode: 'train' or 'test' Dropout acts differently in training and testing mode. Hence, mode is a parameter which\n",
    "                takes in only 2 values, 'train' or 'test' \n",
    "    \n",
    "    Outputs:\n",
    "        AL: numpy.ndarray (c,m)  - outputs of the last fully connected layer before softmax\n",
    "            where c is number of categories and m is number of samples\n",
    "        caches: a list of caches from every layer after forward propagation\n",
    "    '''\n",
    "    \n",
    "    L = parameters['numLayers']\n",
    "    A = A0\n",
    "    caches = []\n",
    "    for l in range(L):\n",
    "        A, cache = layer_forward(A, parameters[\"W\"+str(l+1)], parameters[\"b\"+str(l+1)], \\\n",
    "                                 parameters[\"act\"+str(l+1)], parameters[\"dropout\"+str(l+1)], \\\n",
    "                                 parameters['bnorm_beta'+str(l+1)], parameters['bnorm_gamma'+str(l+1)], mode)\n",
    "        caches.append(cache)\n",
    "    return A, caches"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "markdown",
     "checksum": "136f3914445b836e7df4bba3238ce216",
     "grade": false,
     "grade_id": "cell-5281900868c84d39",
     "locked": true,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "source": [
    "### Backward Propagagtion for the Linear Computation of a Layer (repeated from Assignment 2 - 0 points)\n",
    "\n",
    "Consider the linear layer $Z = W.A\\_prev + b$. We would like to estimate the gradients $\\frac{dL}{dW}$ - represented as $dW$, $\\frac{dL}{db}$ - represented as $db$ and $\\frac{dL}{dA\\_prev}$ - represented as $dA\\_prev$. \n",
    "The input to estimate these derivatives is $\\frac{dL}{dZ}$ - represented as $dZ$. The derivatives are given by, \n",
    "\n",
    "\\begin{equation}\n",
    "dA\\_prev = W^T dZ\\\\\n",
    "dW = dZ A^T\\\\\n",
    "db = \\sum_{i=1}^{m} dZ^{(i)}\\\\\n",
    "\\end{equation}\n",
    "\n",
    "where $dZ = [dz^{(1)},dz^{(2)}, \\ldots, dz^{(m)}]$ is $(n \\times m)$ matrix of derivatives. \n",
    "The figure below represents a case fo binary cassification where $dZ$ is of dimensions $(1 \\times m)$. The example can be extended to $(n\\times m)$. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {
    "deletable": false,
    "nbgrader": {
     "cell_type": "code",
     "checksum": "cf41a82263726e6035c2585266317b26",
     "grade": false,
     "grade_id": "linear_backward_soln",
     "locked": false,
     "schema_version": 3,
     "solution": true,
     "task": false
    }
   },
   "outputs": [],
   "source": [
    "def linear_backward(dZ, cache, W, b):\n",
    "    '''\n",
    "    Backward prpagation through the linear layer\n",
    "\n",
    "    Inputs:\n",
    "        dZ: numpy.ndarray (n,m) derivative dL/dz \n",
    "        cache: a dictionary containing the inputs A, for the linear layer\n",
    "            where Z = WA + b,    \n",
    "            Z is (n,m); W is (n,p); A is (p,m); b is (n,1)\n",
    "        W: numpy.ndarray (n,p)\n",
    "        b: numpy.ndarray (n,1)\n",
    "\n",
    "    Outputs:\n",
    "        dA_prev: numpy.ndarray (p,m) the derivative to the previous layer\n",
    "        dW: numpy.ndarray (n,p) the gradient of W \n",
    "        db: numpy.ndarray (n,1) the gradient of b\n",
    "    '''\n",
    "    \n",
    "    A = cache[\"A\"]\n",
    "    # your code here\n",
    "    dA_prev = np.dot(np.transpose(W), dZ)\n",
    "    dW = np.dot(dZ, np.transpose(A))\n",
    "    db = np.sum(dZ, axis=1, keepdims=True)\n",
    "    return dA_prev, dW, db"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "code",
     "checksum": "d739ea390f5d7e02b6798ce19d59dabc",
     "grade": true,
     "grade_id": "linear_backward",
     "locked": true,
     "points": 0,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "outputs": [],
   "source": [
    "#Hidden test cases follow\n",
    "np.random.seed(1)\n",
    "n1 = 3\n",
    "m1 = 4\n",
    "p1 = 5\n",
    "dZ_t = np.random.randn(n1,m1)\n",
    "A_t = np.random.randn(p1,m1)\n",
    "cache_t = {}\n",
    "cache_t['A'] = A_t\n",
    "W_t = np.random.randn(n1,p1)\n",
    "b_t = np.random.randn(n1,1)\n",
    "\n",
    "dA_prev_est, dW_est, db_est = linear_backward(dZ_t, cache_t, W_t, b_t)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "markdown",
     "checksum": "2e7ae2a750bd9690d211025d37278304",
     "grade": false,
     "grade_id": "cell-f57dc4108dd56c38",
     "locked": true,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "source": [
    "### Back Propagation Through a Layer (dropout $\\rightarrow$ batchnorm $\\rightarrow$ activation $\\rightarrow$ linear)\n",
    "\n",
    "We will define the backpropagation for a layer. We will use the backpropagation for the dropout, followed by backpropagation for batchnorm, backpropagation of activation and backpropagation of a linear layer, in that order. This is the reverse order to the forward propagation."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "code",
     "checksum": "21b514c5a427c236a4954e4465ad2fc4",
     "grade": false,
     "grade_id": "cell-9b7cfa89255f3e03",
     "locked": true,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "outputs": [],
   "source": [
    "def layer_backward(dA, cache, W, b, activation):\n",
    "    '''\n",
    "    Backward propagation through the activation and linear layer\n",
    "\n",
    "    Inputs:\n",
    "        dA: numpy.ndarray (n,m) the derivative to the previous layer\n",
    "        cache: dictionary containing the linear_cache and the activation_cache\n",
    "        W: numpy.ndarray (n,p)\n",
    "        b: numpy.ndarray (n,1)\n",
    "        activation: activation of the layer, 'relu' or 'linear'\n",
    "    \n",
    "    Outputs:\n",
    "        dA_prev: numpy.ndarray (p,m) the derivative to the previous layer\n",
    "        dW: numpy.ndarray (n,p) the gradient of W \n",
    "        db: numpy.ndarray (n,1) the gradient of b\n",
    "        dbnorm_beta: numpy.ndarray (n,1) derivative of beta for the batchnorm layer\n",
    "        dbnorm_gamma: numpy.ndarray (n,1) derivative of gamma for the batchnorm layer\n",
    "    '''\n",
    "\n",
    "    lin_cache = cache[\"lin_cache\"]\n",
    "    act_cache = cache[\"act_cache\"]\n",
    "    drop_cache = cache[\"drop_cache\"]\n",
    "    bnorm_cache = cache[\"bnorm_cache\"]\n",
    "    \n",
    "    dA = dropout_der(dA, drop_cache)\n",
    "    dA, dbnorm_beta, dbnorm_gamma = batchnorm_der(dA, cache[\"bnorm_cache\"])\n",
    "    if activation == \"relu\":\n",
    "        dZ = relu_der(dA, act_cache)\n",
    "    elif activation == \"linear\":\n",
    "        dZ = linear_der(dA, act_cache)\n",
    "        \n",
    "    dA_prev, dW, db = linear_backward(dZ, lin_cache, W, b)\n",
    "    return dA_prev, dW, db, dbnorm_beta, dbnorm_gamma"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "markdown",
     "checksum": "63dd4a8b2ce39e28960758bcc6393bfc",
     "grade": false,
     "grade_id": "cell-72a9dc0cb265dc90",
     "locked": true,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "source": [
    "### Multi-layers Back Propagation\n",
    "\n",
    "We have defined the required functions to handle back propagation for a single layer. Now we will stack the layers together and perform back propagation on the entire network starting with the final layer. We will need teh caches stored during forward propagation. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "code",
     "checksum": "b3c530dd1f62e5cee0dc1c3626ab8832",
     "grade": false,
     "grade_id": "cell-8d2141e7c67dafa5",
     "locked": true,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "outputs": [],
   "source": [
    "def multi_layer_backward(dAL, caches, parameters):\n",
    "    '''\n",
    "    Back propgation through the layers of the network (except softmax cross entropy)\n",
    "    softmax_cross_entropy can be handled separately\n",
    "\n",
    "    Inputs: \n",
    "        dAL: numpy.ndarray (n,m) derivatives from the softmax_cross_entropy layer\n",
    "        caches: a dictionary of associated caches of parameters and network inputs\n",
    "        parameters: dictionary of network parameters {\"W1\":[..],\"b1\":[..],\"W2\":[..],\"b2\":[..]...}\n",
    "\n",
    "    Outputs:\n",
    "        gradients: dictionary of gradient of network parameters \n",
    "            {\"dW1\":[..],\"db1\":[..],\"dW2\":[..],\"db2\":[..],...\\\n",
    "            \"dbnorm_beta1\":[..],\"dbnorm_gamma1\":[..],\"dbnorm_beta2\":[..],\"dbnorm_gamma2\":[..],...}\n",
    "    '''\n",
    "\n",
    "    L = len(caches) \n",
    "    gradients = {}\n",
    "    dA = dAL\n",
    "    activation = \"linear\"\n",
    "    for l in reversed(range(L)):\n",
    "        dA, gradients[\"dW\"+str(l+1)], gradients[\"db\"+str(l+1)], \\\n",
    "        gradients[\"dbnorm_beta\"+str(l+1)], gradients[\"dbnorm_gamma\"+str(l+1)] \\\n",
    "                    = layer_backward(dA, caches[l], parameters[\"W\"+str(l+1)],\\\n",
    "                                     parameters[\"b\"+str(l+1)],parameters[\"act\"+str(l+1)])\n",
    "    return gradients"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "markdown",
     "checksum": "b6f9f7593d557173167d6a84f6f678cb",
     "grade": false,
     "grade_id": "cell-4cb88cabf2344894",
     "locked": true,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "source": [
    "### Parameter Update Using Adam (momentum) (15 points)\n",
    "\n",
    "The parameter gradients $(dW,db)$ calculated during back propagation are used to update the values of the network parameters using Adam optmization which is the momentum technique we discussed in the lecture.\n",
    "\n",
    "\\begin{equation} \n",
    "V_{t+1} = \\beta V_{t} +(1-\\beta)\\nabla J(\\theta_t)\\\\ \n",
    "G_{t+1} = \\beta_2 G_{t} +(1-\\beta_2)\\nabla J(\\theta_t)^2\\\\ \n",
    "\\theta_{t+1} =\\theta_{t} -\\frac{\\alpha}{\\sqrt{G_{t+1}+\\epsilon}}V_{t+1}, \\quad \\theta \\in \\{ W,b \\} \n",
    "\\end{equation}\n",
    "\n",
    "Parameters $V$ are the momentum velocity parameters and parameters $G$ are the Gradient-Squares. \n",
    "$\\nabla J(\\theta)$ is the gradient term $dW$ or $db$, and $\\nabla  J(\\theta)^2$ is the element wise square of the gradient. \n",
    "$\\alpha$ is the step_size for gradient descent. It is has been estimated by decaying the learning_rate based on decay_rate and epoch number. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {
    "deletable": false,
    "nbgrader": {
     "cell_type": "code",
     "checksum": "5b17fe2a2e6d731a24e28a6235d1c389",
     "grade": false,
     "grade_id": "update_momentum_soln",
     "locked": false,
     "schema_version": 3,
     "solution": true,
     "task": false
    }
   },
   "outputs": [],
   "source": [
    "def update_parameters_with_momentum_Adam(parameters, gradients, alpha, beta=0.9, beta2=0.99, eps=1e-8):\n",
    "    '''\n",
    "    Updates the network parameters with gradient descent\n",
    "\n",
    "    Inputs:\n",
    "        parameters: dictionary of \n",
    "                    network parameters, {\"W1\":[..],\"b1\":[..],\"W2\":[..],\"b2\":[..],...}\n",
    "                    velocity parameters, {\"VdW1\":[..],\"Vdb1\":[..],\"VdW2\":[..],\"Vdb2\":[..],...}\n",
    "                    Gradient-Squares parameters, {\"GdW1\":[..],\"Gdb1\":[..],\"GdW2\":[..],\"Gdb2\":[..],...}\n",
    "                    batchnorm parameters, {\"bnorm_beta1\":[..],\"bnorm_gamma1\":[..],\"bnorm_beta2\":[..],\"bnorm_gamma2\":[..],...}\n",
    "                    batchnorm velocity parameters, {\"Vbnorm_beta1\":[..],\"Vbnorm_gamma1\":[..],\"Vbnorm_beta2\":[..],\"Vbnorm_gamma2\":[..],...}\n",
    "                    batchnorm Gradient-Square parameters, {\"Gbnorm_beta1\":[..],\"Gbnorm_gamma1\":[..],\"Gbnorm_beta2\":[..],\"Gbnorm_gamma2\":[..],...}\n",
    "                    and other parameters \n",
    "                    :\n",
    "                    :\n",
    "                    Note: It is just one dictionary (parameters) with all these key value pairs, not multiple dictionaries\n",
    "        gradients: dictionary of gradient of network parameters \n",
    "                   {\"dW1\":[..],\"db1\":[..],\"dW2\":[..],\"db2\":[..],...}\n",
    "        alpha: stepsize for the gradient descent\n",
    "        beta: beta parameter for momentum (same as beta1 in Adam)\n",
    "        beta2: beta2 parameter for Adam\n",
    "        eps: epsilon parameter for Adam\n",
    "        \n",
    "    Outputs: \n",
    "        parameters: updated dictionary of \n",
    "                    network parameters, {\"W1\":[..],\"b1\":[..],\"W2\":[..],\"b2\":[..],...}\n",
    "                    velocity parameters, {\"VdW1\":[..],\"Vdb1\":[..],\"VdW2\":[..],\"Vdb2\":[..],...}\n",
    "                    Gradient-Squares parameters, {\"GdW1\":[..],\"Gdb1\":[..],\"GdW2\":[..],\"Gdb2\":[..],...}\n",
    "                    batchnorm parameters, {\"bnorm_beta1\":[..],\"bnorm_gamma1\":[..],\"bnorm_beta2\":[..],\"bnorm_gamma2\":[..],...}\n",
    "                    batchnorm velocity parameters, {\"Vbnorm_beta1\":[..],\"Vbnorm_gamma1\":[..],\"Vbnorm_beta2\":[..],\"Vbnorm_gamma2\":[..],...}\n",
    "                    batchnorm Gradient-Square parameters, {\"Gbnorm_beta1\":[..],\"Gbnorm_gamma1\":[..],\"Gbnorm_beta2\":[..],\"Gbnorm_gamma2\":[..],...}\n",
    "                    and other parameters \n",
    "                    :\n",
    "                    :\n",
    "                    Note: It is just one dictionary (parameters) with all these key value pairs, not multiple dictionaries\n",
    "             \n",
    "    '''\n",
    "    L = parameters['numLayers']\n",
    "    apply_momentum = parameters['apply_momentum']\n",
    "    bnorm_list = parameters['bnorm_list']\n",
    "    \n",
    "    for l in range(L):\n",
    "        if apply_momentum:\n",
    "            # Apply Adam momentum to parameters W's and b's. \n",
    "            # You will need to update the Velocity parameters VdW's and Vdb's\n",
    "            \n",
    "            parameters[\"VdW\" + str(l+1)] = beta*parameters['VdW'+str(l+1)] + \\\n",
    "                                                    (1 - beta)*gradients[\"dW\"+str(l+1)]\n",
    "            parameters[\"Vdb\" + str(l+1)] = beta*parameters['Vdb'+str(l+1)] + \\\n",
    "                                                    (1 - beta)*gradients[\"db\"+str(l+1)]\n",
    "            \n",
    "            # You will need to update the Gradient-Squares parameters GdW's and Gdb's\n",
    "            \n",
    "            parameters[\"GdW\" + str(l+1)] = beta2*parameters['GdW'+str(l+1)] + \\\n",
    "                                                    (1 - beta2)*(gradients[\"dW\"+str(l+1)]**2)\n",
    "            parameters[\"Gdb\" + str(l+1)] = beta2*parameters['Gdb'+str(l+1)] + \\\n",
    "                                                    (1 - beta2)*(gradients[\"db\"+str(l+1)]**2)\n",
    "            \n",
    "            # You will need to update the parameters W's and b's\n",
    "            parameters[\"W\" + str(l+1)] -= alpha * parameters[\"VdW\" + str(l+1)]/ \\\n",
    "                                            np.sqrt(parameters[\"GdW\" + str(l+1)] + eps) \n",
    "            parameters[\"b\" + str(l+1)] -= alpha * parameters[\"Vdb\" + str(l+1)]/ \\\n",
    "                                            np.sqrt(parameters[\"Gdb\" + str(l+1)] + eps) \n",
    "            # your code here\n",
    "            \n",
    "        else:\n",
    "            # When no momentum is required apply regular gradient descent\n",
    "            parameters[\"W\"+str(l+1)] -= alpha * gradients[\"dW\"+str(l+1)]\n",
    "            parameters[\"b\"+str(l+1)] -= alpha * gradients[\"db\"+str(l+1)]\n",
    "        \n",
    "        # The Adam momentum for batch norm parameters has been implemented below\n",
    "        if apply_momentum and bnorm_list[l]:\n",
    "            parameters['Vbnorm_beta'+str(l+1)] = beta*parameters['Vbnorm_beta'+str(l+1)] + \\\n",
    "                                                    (1 - beta)*gradients[\"dbnorm_beta\"+str(l+1)]\n",
    "            parameters['Vbnorm_gamma'+str(l+1)] = beta*parameters['Vbnorm_gamma'+str(l+1)] + \\\n",
    "                                                    (1 - beta)*gradients[\"dbnorm_gamma\"+str(l+1)]\n",
    "            parameters['Gbnorm_beta'+str(l+1)] = beta2*parameters['Gbnorm_beta'+str(l+1)] + \\\n",
    "                                                    (1 - beta2)*(gradients[\"dbnorm_beta\"+str(l+1)]**2)\n",
    "            parameters['Gbnorm_gamma'+str(l+1)] = beta2*parameters['Gbnorm_gamma'+str(l+1)] + \\\n",
    "                                                    (1 - beta2)*(gradients[\"dbnorm_gamma\"+str(l+1)]**2)\n",
    "            parameters['bnorm_beta' + str(l+1)] = parameters['bnorm_beta' + str(l+1)] \\\n",
    "                        - alpha*parameters['Vbnorm_beta'+str(l+1)]/np.sqrt(parameters['Gbnorm_beta'+str(l+1)] + eps)\n",
    "            parameters['bnorm_gamma' + str(l+1)] = parameters['bnorm_gamma' + str(l+1)] \\\n",
    "                        - alpha*parameters['Vbnorm_gamma'+str(l+1)]/np.sqrt(parameters['Gbnorm_gamma'+str(l+1)] + eps)\n",
    "        elif bnorm_list[l]:\n",
    "            parameters['bnorm_beta' + str(l+1)] -= alpha * gradients[\"dbnorm_beta\"+str(l+1)]\n",
    "            parameters['bnorm_gamma' + str(l+1)] -= alpha * gradients[\"dbnorm_beta\"+str(l+1)]\n",
    "        \n",
    "    return parameters"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "code",
     "checksum": "f97558d40b2681227c5ad08fd26599c4",
     "grade": true,
     "grade_id": "update_momentum",
     "locked": true,
     "points": 15,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "outputs": [],
   "source": [
    "# Testing without apply_momentum\n",
    "apply_momentum_t=True\n",
    "np.random.seed(1)\n",
    "n1 = 3\n",
    "m1 = 4\n",
    "p1 = 2\n",
    "A0_t = np.random.randn(n1,m1)\n",
    "Y_t = np.array([[1., 0., 0., 1.]])\n",
    "net_dims_t = [n1,m1,p1]\n",
    "act_list_t = ['relu', 'linear']\n",
    "drop_prob_list_t = [0.3,0]\n",
    "parameters_t = initialize_network(net_dims_t, act_list_t, drop_prob_list_t)\n",
    "parameters_t = initialize_velocity(parameters_t, apply_momentum_t)\n",
    "bnorm_list_t = [0,0]\n",
    "parameters_t = initialize_bnorm_params(parameters_t, bnorm_list_t, apply_momentum_t)\n",
    "A_t, caches_t = multi_layer_forward(A0_t, parameters_t, 'train')\n",
    "AL_t,softmax_cache_t,_ = softmax_cross_entropy_loss(A_t,Y_t)\n",
    "dAL_t = softmax_cross_entropy_loss_der(Y_t, softmax_cache_t)\n",
    "gradients_t = multi_layer_backward(dAL_t, caches_t, parameters_t)\n",
    "parameters_t = update_parameters_with_momentum_Adam(parameters_t, gradients_t, alpha=1)\n",
    "parameters_t = update_parameters_with_momentum_Adam(parameters_t, gradients_t, alpha=1)\n",
    "npt.assert_array_almost_equal(parameters_t['W1'],np.array(\n",
    "      [[-2.7191573 , -2.79033829,  3.6559832 ],\n",
    "       [ 1.07680635,  2.14776979,  1.3330437 ],\n",
    "       [-2.29708863, -1.67003859, -3.38885276],\n",
    "       [ 3.66847147, -1.30571348, -1.76653199]]),decimal=6)\n",
    "npt.assert_array_almost_equal(parameters_t['b1'],np.array([[ 2.34687006],[-2.3468659 ],[-2.34495502],[-2.34646538]]),decimal=6)\n",
    "npt.assert_array_almost_equal(parameters_t['W2'],np.array(\n",
    "      [[ 3.247725  ,  1.66314062, -2.46646577,  1.41104969],\n",
    "       [-2.61475713, -1.81651301,  1.65191479, -2.74357265]]),decimal=6)\n",
    "npt.assert_array_almost_equal(parameters_t['b2'],np.array([[2.34685986],[-2.34685986]]),decimal=6)\n",
    "\n",
    "npt.assert_array_almost_equal(parameters_t['VdW1'],np.array(\n",
    "      [[ 0.04959329,  0.08954598, -0.02339858],\n",
    "       [-0.03635384, -0.13950981, -0.01346142],\n",
    "       [ 0.00538899,  0.00279682,  0.00033368],\n",
    "       [-0.01183912,  0.01798966,  0.01645148]]),decimal=6)\n",
    "npt.assert_array_almost_equal(parameters_t['Vdb1'],np.array([[-0.08461959],[0.06005603],[0.0039684 ],[0.00860207]]),decimal=6)\n",
    "npt.assert_array_almost_equal(parameters_t['GdW1'],np.array(\n",
    "      [[1.35578790e-03, 4.42016104e-03, 3.01803982e-04],\n",
    "       [7.28528402e-04, 1.07289049e-02, 9.98913468e-05],\n",
    "       [1.60088503e-05, 4.31196318e-06, 6.13777575e-08],\n",
    "       [7.72653956e-05, 1.78398694e-04, 1.49195616e-04]]),decimal=6)\n",
    "npt.assert_array_almost_equal(parameters_t['Gdb1'],np.array([[3.94718747e-03],[1.98819556e-03],[8.68115211e-06],[4.07898679e-05]]),decimal=6)\n",
    "npt.assert_array_almost_equal(parameters_t['VdW2'],np.array(\n",
    "      [[-0.07598473, -0.07214759,  0.00302548, -0.02342229],\n",
    "       [ 0.07598473,  0.07214759, -0.00302548,  0.02342229]]),decimal=6)\n",
    "npt.assert_array_almost_equal(parameters_t['Vdb2'],np.array([[-0.0457975],[0.0457975]]),decimal=6)\n",
    "npt.assert_array_almost_equal(parameters_t['GdW2'],np.array(\n",
    "      [[3.18272027e-03, 2.86938965e-03, 5.04586721e-06, 3.02415905e-04],\n",
    "       [3.18272027e-03, 2.86938965e-03, 5.04586721e-06, 3.02415905e-04]]),decimal=6)\n",
    "npt.assert_array_almost_equal(parameters_t['Gdb2'],np.array([[0.00115619],[0.00115619]]),decimal=6)\n",
    "\n",
    "# Testing without momentum\n",
    "np.random.seed(1)\n",
    "apply_momentum_t=False\n",
    "n1 = 2\n",
    "m1 = 3\n",
    "p1 = 2\n",
    "A0_t = np.random.randn(n1,m1)\n",
    "Y_t = np.array([[1., 0., 0.]])\n",
    "net_dims_t = [n1,m1,p1]\n",
    "act_list_t = ['relu', 'linear']\n",
    "drop_prob_list_t = [0.3,0]\n",
    "parameters_t = initialize_network(net_dims_t, act_list_t, drop_prob_list_t)\n",
    "parameters_t = initialize_velocity(parameters_t, apply_momentum_t)\n",
    "bnorm_list_t = [0,0]\n",
    "parameters_t = initialize_bnorm_params(parameters_t, bnorm_list_t, apply_momentum_t)\n",
    "A_t, caches_t = multi_layer_forward(A0_t, parameters_t, 'train')\n",
    "AL_t,softmax_cache_t,_ = softmax_cross_entropy_loss(A_t,Y_t)\n",
    "dAL_t = softmax_cross_entropy_loss_der(Y_t, softmax_cache_t)\n",
    "gradients_t = multi_layer_backward(dAL_t, caches_t, parameters_t)\n",
    "parameters_t = update_parameters_with_momentum_Adam(parameters_t, gradients_t, alpha=1)\n",
    "parameters_t = update_parameters_with_momentum_Adam(parameters_t, gradients_t, alpha=1)\n",
    "npt.assert_array_almost_equal(parameters_t['W1'],np.array(\n",
    "      [[ 2.38556532, -1.43370309],\n",
    "       [ 0.82922072, -0.60237324],\n",
    "       [-1.52567143, -0.53983959]]),decimal=6)\n",
    "npt.assert_array_almost_equal(parameters_t['b1'],np.array([[0.1551979 ],[0.23272841],[-2.21221693]]),decimal=6)\n",
    "npt.assert_array_almost_equal(parameters_t['W2'],np.array(\n",
    "      [[-0.16928131, -1.50183323, -4.86682037],\n",
    "       [-1.47305905,  0.85926252,  5.16232096]]),decimal=6)\n",
    "npt.assert_array_almost_equal(parameters_t['b2'],np.array([[-0.21232129],[0.21232129]]),decimal=6)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "markdown",
     "checksum": "dd7d5ca20b9bd5d6aa52f678918cd624",
     "grade": false,
     "grade_id": "cell-76abe4d415a1f55e",
     "locked": true,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "source": [
    "### Multilayer Neural Network (10 points)\n",
    "\n",
    "Let us now assemble all the components of the neural network together and define a complete training loop for a Multi-layer Neural Network."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {
    "deletable": false,
    "nbgrader": {
     "cell_type": "code",
     "checksum": "e0f5f0363eb77f5dd63edc993f5e1608",
     "grade": false,
     "grade_id": "multi_layer_network_soln",
     "locked": false,
     "schema_version": 3,
     "solution": true,
     "task": false
    }
   },
   "outputs": [],
   "source": [
    "def multi_layer_network(X, Y, net_dims, act_list, drop_prob_list, bnorm_list, num_epochs=3, \n",
    "                        batch_size=64, learning_rate=0.2, decay_rate=0.01, apply_momentum=True, log=True, log_step=200):\n",
    "    \n",
    "    '''\n",
    "    Creates the multilayer network and trains the network\n",
    "\n",
    "    Inputs:\n",
    "        X: numpy.ndarray (n,m) of training data\n",
    "        Y: numpy.ndarray (1,m) of training data labels\n",
    "        net_dims: tuple of layer dimensions\n",
    "        act_list: list of strings indicating the activations for each layer\n",
    "        drop_prob_list: list of dropout probabilities for each layer \n",
    "        bnorm_list: binary list indicating presence or absence of batchnorm for each layer\n",
    "        num_epochs: num of epochs to train\n",
    "        batch_size: batch size for training\n",
    "        learning_rate: learning rate for gradient descent\n",
    "        decay_rate: rate of learning rate decay\n",
    "        apply_momentum: boolean whether to apply momentum or not\n",
    "        log: boolean whether to print training progression \n",
    "        log_step: prints training progress every log_step iterations\n",
    "    \n",
    "    Outputs:\n",
    "        costs: list of costs (or loss) over training\n",
    "        parameters: dictionary of \n",
    "                    network parameters, {\"W1\":[..],\"b1\":[..],\"W2\":[..],\"b2\":[..],...}\n",
    "                    velocity parameters, {\"VdW1\":[..],\"Vdb1\":[..],\"VdW2\":[..],\"Vdb2\":[..],...}\n",
    "                    Gradient-Squares parameters, {\"GdW1\":[..],\"Gdb1\":[..],\"GdW2\":[..],\"Gdb2\":[..],...}\n",
    "                    batchnorm parameters, {\"bnorm_beta1\":[..],\"bnorm_gamma1\":[..],\"bnorm_beta2\":[..],\"bnorm_gamma2\":[..],...}\n",
    "                    batchnorm velocity parameters, {\"Vbnorm_beta1\":[..],\"Vbnorm_gamma1\":[..],\"Vbnorm_beta2\":[..],\"Vbnorm_gamma2\":[..],...}\n",
    "                    batchnorm Gradient-Square parameters, {\"Gbnorm_beta1\":[..],\"Gbnorm_gamma1\":[..],\"Gbnorm_beta2\":[..],\"Gbnorm_gamma2\":[..],...}\n",
    "                    Note: It is just one dictionary (parameters) with all these key value pairs, not multiple dictionaries\n",
    "    '''\n",
    "    mode = 'train'\n",
    "    n, m = X.shape\n",
    "    parameters = initialize_network(net_dims, act_list, drop_prob_list)\n",
    "    parameters = initialize_velocity(parameters, apply_momentum)\n",
    "    parameters = initialize_bnorm_params(parameters, bnorm_list, apply_momentum)\n",
    "    costs = []\n",
    "    itr = 0\n",
    "    for epoch in range(num_epochs):\n",
    "        # estimate stepsize alpha using decay_rate on learning rate using epoch number\n",
    "        alpha = learning_rate*(1/(1+decay_rate*epoch))\n",
    "        if log:\n",
    "            print('------- Epoch {} -------'.format(epoch+1))\n",
    "        for ii in range((m - 1) // batch_size + 1):\n",
    "            Xb = X[:, ii*batch_size : (ii+1)*batch_size]\n",
    "            Yb = Y[:, ii*batch_size : (ii+1)*batch_size]\n",
    "            A0 = Xb\n",
    "        \n",
    "            ## Forward Propagation\n",
    "            # Step 1: Input 'A0', 'parameters' and 'mode' into the network \n",
    "            #         using multi_layer_forward() and calculate output of last layer 'A' (before softmax) \n",
    "            #         and obtain cached activations as 'caches'\n",
    "            # Step 2: Input 'A' and groundtruth labels 'Yb' to softmax_cros_entropy_loss(.) and estimate\n",
    "            #         activations 'AL', 'softmax_cache' and 'cost'\n",
    "\n",
    "            ## Back Propagation\n",
    "            # Step 3: Estimate gradient 'dAL' with softmax_cros_entropy_loss_der(.) using groundtruth \n",
    "            #         labels 'Yb' and 'softmax_cache' \n",
    "            # Step 4: Estimate 'gradients' with multi_layer_backward(.) using 'dAL', 'caches' and 'parameters' \n",
    "            # Step 5: Estimate updated 'parameters' with update_parameters_with_momentum_Adam(.) \n",
    "            #         using 'parameters', 'gradients' and 'alpha'\n",
    "            #         Note: Use the same variable 'parameters' as input and output to the update_parameters(.) function\n",
    "        \n",
    "            # your code here\n",
    "            A, caches = multi_layer_forward(A0, parameters, mode)\n",
    "            AL, softmax_cache, cost = softmax_cross_entropy_loss(A, Yb)\n",
    "            dAL = softmax_cross_entropy_loss_der(Yb, softmax_cache)\n",
    "            gradients = multi_layer_backward(dAL, caches, parameters)\n",
    "            parameters = update_parameters_with_momentum_Adam(parameters, gradients, alpha)\n",
    "            \n",
    "\n",
    "            if itr % log_step == 0:\n",
    "                costs.append(cost)\n",
    "                if log:\n",
    "                    print(\"Cost at iteration %i is: %.05f, learning rate: %.05f\" %(itr, cost, alpha))\n",
    "            itr+=1\n",
    "    \n",
    "    return costs, parameters"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "code",
     "checksum": "d5b30052c20c8d00b5334fb1161a632d",
     "grade": true,
     "grade_id": "cell-multi_layer_network",
     "locked": true,
     "points": 10,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "outputs": [],
   "source": [
    "np.random.seed(1)\n",
    "n1 = 3\n",
    "m1 = 6\n",
    "p1 = 3\n",
    "A0_t = np.random.randn(n1,m1)\n",
    "Y_t = np.array([[1., 0., 2., 0, 1., 2.]])\n",
    "net_dims_t = [n1,m1,p1]\n",
    "act_list_t = ['relu', 'linear']\n",
    "drop_prob_list_t = [0.3,0]\n",
    "bnorm_list_t = [0,0]\n",
    "num_epochs_t = 1\n",
    "batch_size_t = 2\n",
    "learning_rate_t = 1e-1\n",
    "decay_rate_t = 1\n",
    "apply_momentum_t = True\n",
    "costs_est, parameters_est = multi_layer_network(A0_t, Y_t, net_dims_t, act_list_t, drop_prob_list_t, bnorm_list_t, \\\n",
    "                                        num_epochs=num_epochs_t, batch_size=batch_size_t, learning_rate=learning_rate_t, \\\n",
    "                                        decay_rate=decay_rate_t, apply_momentum=apply_momentum_t, log=False, log_step=1)\n",
    "npt.assert_array_almost_equal(costs_est,np.array([0.8291501476754569, 3.1183677832322285, 4.988510889921268]),decimal=6)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "markdown",
     "checksum": "8258b52466398b97d07c4fac54a14329",
     "grade": false,
     "grade_id": "cell-66defde04ecba045",
     "locked": true,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "source": [
    "### Prediction (5 points)\n",
    "\n",
    "This is the evaluation function which will predict the labels for a minibatch of inputs samples\n",
    "We will perform forward propagation through the entire network and determine the class predictions for the input data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {
    "deletable": false,
    "nbgrader": {
     "cell_type": "code",
     "checksum": "c648f2b41d8b9602fac153cb151e1127",
     "grade": false,
     "grade_id": "classify_soln",
     "locked": false,
     "schema_version": 3,
     "solution": true,
     "task": false
    }
   },
   "outputs": [],
   "source": [
    "def classify(X, parameters, mode='test'):\n",
    "    '''\n",
    "    Network prediction for inputs X\n",
    "\n",
    "    Inputs: \n",
    "        X: numpy.ndarray (n,m) with n features and m samples\n",
    "        parameters: dictionary of network parameters \n",
    "            {\"W1\":[..],\"b1\":[..],\"W2\":[..],\"b2\":[..],...}\n",
    "        drop_prob_list: list of dropout probabilities for each layer \n",
    "        mode: 'train' or 'test' Dropout acts differently in training and testing mode.\n",
    "        \n",
    "    Outputs:\n",
    "        YPred: numpy.ndarray (1,m) of predictions\n",
    "    '''\n",
    "    # Using multi_layer_forward(.) Forward propagate input 'X' with 'parameters' and mode to \n",
    "    #        obtain the final activation 'A'\n",
    "    # Using 'softmax_cross_entropy loss(.)', obtain softmax activation 'AL' with input 'A' from step 1\n",
    "    # Estimate 'YPred' as the 'argmax' of softmax activation from step-2. These are the label predictions \n",
    "    # Note: the shape of 'YPred' should be (1,m), where m is the number of samples\n",
    "    \n",
    "    # your code here\n",
    "    A, caches = multi_layer_forward(X, parameters,mode)\n",
    "    AL,cache,loss = softmax_cross_entropy_loss(A)\n",
    "    YPred = np.array([])\n",
    "    YPred = np.argmax(AL, axis=0)\n",
    "    YPred = YPred.reshape(-1, YPred.size)    \n",
    "    return YPred"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "code",
     "checksum": "b18208760c4d806ebc58b7aba782f149",
     "grade": true,
     "grade_id": "classify",
     "locked": true,
     "points": 5,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "outputs": [],
   "source": [
    "#Hidden test cases follow\n",
    "np.random.seed(1)\n",
    "n1 = 3\n",
    "m1 = 4\n",
    "p1 = 2\n",
    "X_t = np.random.randn(n1,m1)\n",
    "net_dims_t = [n1,m1,p1]\n",
    "act_list_t = ['relu', 'linear']\n",
    "drop_prob_list = [0.3,0]\n",
    "parameters_t = initialize_network(net_dims_t, act_list_t, drop_prob_list)\n",
    "bnorm_list_t = [0,0]\n",
    "parameters_t = initialize_bnorm_params(parameters_t, bnorm_list_t, False)\n",
    "#parameters_t = {'W1':W1_t, 'b1':b1_t, 'W2':W2_t, 'b2':b2_t, 'numLayers':2, 'act1':'relu', 'act2':'linear'}\n",
    "YPred_est = classify(X_t, parameters_t)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "markdown",
     "checksum": "0a8d461d5399d9e219915a9fb4744e46",
     "grade": false,
     "grade_id": "cell-f44aae42add8fd84",
     "locked": true,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "source": [
    "### Training (10 points)\n",
    "\n",
    "We will now intialize a neural network with 3 hidden layers whose dimensions are 100, 100 and 64. \n",
    "Since the input samples are of dimension 28 $\\times$ 28, the input layer will be of dimension 784. The output dimension is 10 since we have a 10 category classification. \n",
    "We will train the model and compute its accuracy on both training and test sets and plot the training cost (or loss) against the number of iterations. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {
    "deletable": false,
    "nbgrader": {
     "cell_type": "code",
     "checksum": "e838550fae62d69a1a9965e4800dfd35",
     "grade": false,
     "grade_id": "test_acc_soln",
     "locked": false,
     "schema_version": 3,
     "solution": true,
     "task": false
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Network dimensions are:[784, 100, 100, 64, 10]\n",
      "Dropout= [[0, 0, 0, 0]], Batch Size = 64, lr = 0.01, decay rate = 1\n",
      "------- Epoch 1 -------\n",
      "Cost at iteration 0 is: 3.19439, learning rate: 0.01000\n",
      "Cost at iteration 200 is: 0.69714, learning rate: 0.01000\n",
      "Cost at iteration 400 is: 0.33321, learning rate: 0.01000\n",
      "Cost at iteration 600 is: 0.16808, learning rate: 0.01000\n",
      "Cost at iteration 800 is: 0.17616, learning rate: 0.01000\n",
      "------- Epoch 2 -------\n",
      "Cost at iteration 1000 is: 0.22808, learning rate: 0.00500\n",
      "Cost at iteration 1200 is: 0.29536, learning rate: 0.00500\n",
      "Cost at iteration 1400 is: 0.10199, learning rate: 0.00500\n",
      "Cost at iteration 1600 is: 0.19070, learning rate: 0.00500\n",
      "Cost at iteration 1800 is: 0.16993, learning rate: 0.00500\n",
      "------- Epoch 3 -------\n",
      "Cost at iteration 2000 is: 0.06496, learning rate: 0.00333\n",
      "Cost at iteration 2200 is: 0.35241, learning rate: 0.00333\n",
      "Cost at iteration 2400 is: 0.09339, learning rate: 0.00333\n",
      "Cost at iteration 2600 is: 0.25355, learning rate: 0.00333\n",
      "Cost at iteration 2800 is: 0.01925, learning rate: 0.00333\n",
      "Accuracy for training set is 96.890 %\n",
      "Accuracy for testing set is 96.100 %\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# You should be able to get a train accuracy of >90% and a test accuracy >85% \n",
    "# The settings below gave >95% train accuracy and >90% test accuracy \n",
    "\n",
    "# Feel free to adjust the values and explore how the network behaves\n",
    "net_dims = [784, 100, 100, 64, 10] # This network has 4 layers\n",
    "#784 is for image dimensions\n",
    "#10 is for number of categories \n",
    "#100 and 64 are arbitrary\n",
    "\n",
    "# list of dropout probabilities for each layer\n",
    "# The length of the list is equal to the number of layers\n",
    "# Note: Has to be same length as net_dims. 0 indicates no dropout\n",
    "drop_prob_list = [0, 0, 0, 0]\n",
    "\n",
    "# binary list indicating if batchnorm should be implemented for a layer\n",
    "# The length of the list is equal to the number of layers\n",
    "# 1 indicates bathnorm and 0 indicates no batchnorm\n",
    "# If your implementation of batchnorm is incorrect, then set bnorm_list = [0,0,0,0]\n",
    "bnorm_list = [1,1,1,1]\n",
    "assert(len(bnorm_list) == len(net_dims)-1)\n",
    "\n",
    "# list of strings indicating the activation for a layer\n",
    "# The length of the list is equal to the number of layers\n",
    "# The last layer is usually a linear before the softmax\n",
    "act_list = ['relu', 'relu', 'relu', 'linear']\n",
    "assert(len(act_list) == len(net_dims)-1)\n",
    "    \n",
    "# initialize learning rate, decay_rate and num_iterations \n",
    "num_epochs = 3\n",
    "batch_size = 64\n",
    "learning_rate = 1e-2\n",
    "decay_rate = 1\n",
    "apply_momentum = True\n",
    "\n",
    "np.random.seed(1)\n",
    "\n",
    "print(\"Network dimensions are:\" + str(net_dims))\n",
    "print('Dropout= [{}], Batch Size = {}, lr = {}, decay rate = {}'\\\n",
    "      .format(drop_prob_list,batch_size,learning_rate,decay_rate)) \n",
    "\n",
    "# getting the subset dataset from MNIST\n",
    "trX, trY, tsX, tsY = get_mnist()\n",
    "# We need to reshape the data everytime to match the format (d,m), where d is dimensions (784) and m is number of samples\n",
    "trX = trX.reshape(-1, 28*28).T\n",
    "trY = trY.reshape(1, -1)\n",
    "tsX = tsX.reshape(-1, 28*28).T\n",
    "tsY = tsY.reshape(1, -1)\n",
    "\n",
    "costs, parameters = multi_layer_network(trX, trY, net_dims, act_list, drop_prob_list, bnorm_list, \\\n",
    "                                        num_epochs=num_epochs, batch_size=batch_size, learning_rate=learning_rate, \\\n",
    "                                        decay_rate=decay_rate, apply_momentum=apply_momentum, log=True)\n",
    "\n",
    "# compute the accuracy for training set and testing set\n",
    "train_Pred = classify(trX, parameters)\n",
    "\n",
    "test_Pred = classify(tsX, parameters)\n",
    "\n",
    "# Estimate the training accuracy 'trAcc' comparing train_Pred and trY \n",
    "# Estimate the testing accuracy 'teAcc' comparing test_Pred and tsY\n",
    "# your code here\n",
    "\n",
    "if trY.size!=0:\n",
    "        trAcc = np.mean(train_Pred==trY)*100\n",
    "if tsY.size!=0:\n",
    "        teAcc = np.mean(test_Pred==tsY)*100\n",
    "\n",
    "print(\"Accuracy for training set is {0:0.3f} %\".format(trAcc))\n",
    "print(\"Accuracy for testing set is {0:0.3f} %\".format(teAcc))\n",
    "\n",
    "plt.plot(range(len(costs)),costs)\n",
    "plt.xlabel(\"Iterations\")\n",
    "plt.ylabel(\"Loss\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [],
   "source": [
    "# The following set up gives an accuracy of > 96% for both test and train. \n",
    "# Feel free to change the settings to get the best accuracy \n",
    "np.random.seed(1)\n",
    "\n",
    "net_dims = [784, 100, 100, 10] \n",
    "drop_prob_list = [0, 0, 0]\n",
    "act_list = ['relu', 'relu', 'linear']\n",
    "    \n",
    "# initialize learning rate, decay_rate and num_iterations \n",
    "num_epochs = 3\n",
    "batch_size = 64\n",
    "learning_rate = 1e-3\n",
    "decay_rate = 0.1\n",
    "apply_momentum = True\n",
    "\n",
    "# If your implementation of batchnorm is incorrect, \n",
    "# then set bnorm_list = [0,0,0] below to run the following testcase without batchnorm. \n",
    "# bnorm_list = [1 1 1] - initially \n",
    "# The test case is still expected to pass without batchnorm when your accuracy is above 95%\n",
    "bnorm_list = [1,1,1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "code",
     "checksum": "64e37b89e48e9733c099ea03a0aedf51",
     "grade": true,
     "grade_id": "test_acc",
     "locked": true,
     "points": 10,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "outputs": [],
   "source": [
    "# getting the subset dataset from MNIST\n",
    "trX, trY, tsX, tsY = get_mnist()\n",
    "# We need to reshape the data everytime to match the format (d,m), where d is dimensions (784) and m is number of samples\n",
    "trX = trX.reshape(-1, 28*28).T\n",
    "trY = trY.reshape(1, -1)\n",
    "tsX = tsX.reshape(-1, 28*28).T\n",
    "tsY = tsY.reshape(1, -1)\n",
    "\n",
    "costs, parameters = multi_layer_network(trX, trY, net_dims, act_list, drop_prob_list, bnorm_list, \\\n",
    "                                        num_epochs=num_epochs, batch_size=batch_size, learning_rate=learning_rate, \\\n",
    "                                        decay_rate=decay_rate, apply_momentum=apply_momentum, log=False)\n",
    "\n",
    "# compute the accuracy for training set and testing set\n",
    "train_Pred = classify(trX, parameters)\n",
    "test_Pred = classify(tsX, parameters)\n",
    "\n",
    "# Contains hidden tests \n",
    "# Should get atleast 95% train and test accuracy"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy for training set is 97.142 %\n",
      "Accuracy for testing set is 96.640 %\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "if trY.size!=0:\n",
    "        trAcc = np.mean(train_Pred==trY)*100\n",
    "if tsY.size!=0:\n",
    "        teAcc = np.mean(test_Pred==tsY)*100\n",
    "\n",
    "print(\"Accuracy for training set is {0:0.3f} %\".format(trAcc))\n",
    "print(\"Accuracy for testing set is {0:0.3f} %\".format(teAcc))\n",
    "\n",
    "plt.plot(range(len(costs)),costs)\n",
    "plt.xlabel(\"Iterations\")\n",
    "plt.ylabel(\"Loss\")\n",
    "plt.show()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
